
2022-11-13

* 既存の GMATCH の実装がちゃんと実装できているのか?

  `*' が任意の文字列に一致する場合には部分文字列だけチェックすれば良い。最短一
  致が定まれば最長一致は単に一番最後の要素が一致する最後の箇所を見つければ良い。
  FNM_PATHNAME が指定されている時には `*' は / やその他の特別の条件を満たす `.'
  には一致できない。なので、単に一番最後の要素を見れば良いという訳には行かない。
  特に [a/] や [^a] などの bracket expression があった時に / をスキップする回数
  が色々になるので backtracking が必要になる。因みに . に関しては bracket
  expression でもチェックしている様なので問題は生じないだろう。

  そうすると真面目な backtracking が必要になる。GMATCH でどの様に処理しているか
  を確認したらちゃんと処理していない気がする。これだと問題が生じるのではないか。

  ? というか今確認したら [/] は / には一致しないと書かれている。なのでこの問題
    は生じない? [a/] が異なる / の個数 (0 or 1) を consume する可能性はない。と
    思ったがよく見ると [[:graph:]] などでは未だ一致してしまう気がするし、また
    [.-0] でも一致してしまう気がする。また [^a] などでも一致してしまう気がする。
    全面的に一致を抑制するべきなのではないか。

    ? [[:graph:]], [.-0] (LC_COLLATE=C), [^a] は本当に / に一致するのか?

  * 実際に GMATCH がちゃんと動いているのかどうかについて確認する事にする。

  ? うーん。. に関しては本当に問題がないだろうか。. と直接に書いた時には必ず一
    致する。しかし、直前に / があるかどうかについては色々である。例えば /*.a と
    書いた時には /.a になったり或いは /a.a になったりするのでは。そして場合によっ
    ては特別な . であり場合によっては普通の . と解釈される。

    と思ったが * は * が現れた時点でその場に . があったら、例えゼロ幅一致の可能
    性があるとしても失敗するので気にしなくて良い気がする。

  * 実際の Bash の動作を見て動作を確認する事にする。

    具体例について考える。例えば以下がちゃんと一致するのかというのが疑問である。

      aar/hello/world == *[a/]*[a/]*r*

    最初の aa に一致してしまった場合、r まで行った後に失敗するがその時にはもう
    backtracking 情報がないので一致できなくなってしまうのではないか。

  何れにしてもこの部分の取り扱いを確定するまでは色々編集するのは一旦停止してお
  いた方が良い様な気がする。期待としては [...] は FNM_MATCH では常に / には一致
  しない様になって欲しいが、容易に想像できるのは今までそうなっていたからこのま
  まが意図した動作なのであるなどと主張して既存の変な振る舞いを押し通される事で
  ある。そうなったら嫌なので fnmatch の動作についても確認しておく必要がある気が
  する。

  1. bash を使って bash の FNM_PATHNAME の時の内部実装がどうなっているかを確認
    する方法は存在するだろうか。

    先ず glob.c で指定しているがこの関数は struct dirent *dp; の dp->d_name (の
    文字コードを変換した物) を指定しているので / が文字列に混入する事はない。

    - 実際に strmatch を呼び出している箇所で対象文字列を出力してみたがやはりファ
      イル名本体に対してテストしているだけでパスは含まれていない。

    - ** が含まれる場合についても見てみたが ** は / で区切った後に厳密に ** の
      時にだけ動作し、その場合には単にファイル名を全て列挙するだけなので、** で
      一致した物に対して改めて path を展開するという事はないのである。

    - path に [x/] 等の bracket expression が含まれる場合にはそもそも glob
      matching が試みられない様である。また、[!x] 等の場合には単に現在のディレ
      クトリに含まれるファイル名に対して matching が行われるのであって、やはり
      / を含むような path に対して一致が試みられる事はない。

    従ってこの箇所では FNM_PATHNAME を指定していなくても実質的に動作は変わらな
    い。実際に sm_loop.c を改めて確認したが FNM_PATHNAME は必ず / と組にして使っ
    ている。

    次に pathexp.c でも指定されている。こちらは GLOBIGNORE のテストに使われてい
    る。これなら一応 bash で FNM_PATHNAME を指定した時にどの様に動作するかにつ
    いて確認する事ができる。実際に試してみた。ちゃんとこれでチェックできる様である。

    ? 一つよく分からない動作がある。何故か [/] が一致している。ソースコード中で
      は一致しない事になっていた筈では? 或いは最初の文字が / の時には一致してし
      まう事になっているのであろうか → これは単にチェックが 2 文字目を読んでか
      ら実行されていたからである。かなり意味不明なコードである。

  2. fnmatch の動作についても確認しておく。→ fnmatch の動作を確認したところ
    [...] は FNM_PATHNAME に対しては決して pathchars とは一致しない様だ。なので
    bash の strmatch の動作を変更する言い訳になる。

* 他にもこれに関連して色々微妙な事がある。FNM_MODE_MATCH{,_ALL} の場合に関して
  は、例え [] の振る舞いを修正して / に決して一致しない様にしたとしても、やはり
  現在の実装の様に gmatch で backtracking なしで一回一致すれば良いという訳には
  行かない。

  選択肢としては

  a. exact/prefix matching の時は先頭から探索する。suffix matching の時には末尾
    から探索する。middle の時には gmatch は使わない様にする。

  b. 或いは a で middle に対しては初期位置を変えつつ繰り返し呼び出す事にする。

  c. 或いは開始位置に関する backtracking は別に実施する。

  うーん。c の実装で良い様な気がする。いずれにしてもこれはちゃんとテストを用意
  してから変更する必要がある様な気がする。段々と実装が複雑になっている。コード
  の一つ一つに対応する様なテストが必要な気がする。

* 現在の実装だと FNM_PATHNAME で *.ext が .ext に一致してしまうのではないか。何
  故なら、* に visit した時点で次の文字をチェックせずに次の pattern 要素にも
  visit しているから。

  うーん。今動作を確認してみたらちゃんと期待通りに動いている気がする。不思議だ。
  何れにしても何が中で起こっているのか、正しく処理しているのか再度確認する必要
  がある。

2022-10-31

* extglob time complexity
  https://lists.gnu.org/archive/html/bug-bash/2022-10/msg00132.html

  これは簡単に再現できる。n^2 でスケールする。

  foo=$(seq 10000)
  time bar=${foo%%+( )}

  $ ./bash -O extglob -c 'foo=$(seq 5000); time bar=${foo%+( )}'

  (subst.c) remove_pattern の中で呼び出されている remove_wpattern が遅い。
  remove_wpattern の中では wcsmatch を繰り返し全ての位置に対して呼び出している。
  というか最初の位置と最後の位置を厳密に指定して毎回一致させる仕組みになってい
  る? これは道理で遅い訳である。

  然しそうだとしても +( ) は最初の一文字で失敗する筈なので n^2 でスケールするの
  は理解できない。wcsmatch の中も確認する。wcsmatch (lib/glob/strmatch.c) は単
  に internal_wstrmatch を呼び出している。internal_wstrmatch は
  lib/glob/smatch.c で定義されているが実際の実装は lib/glob/sm_loop.c の FCT で
  ある。更に FCT は GMATCH を呼び出しているだけである。

  ? うーん。特に strlen で最後まで舐めているのが原因の気がする。これを外から渡
    すインターフェイスを作れば良いだけなのでは? → 試しに少し修正してみたがやは
    り駄目だ。backtracking なども考えると単純ではない。現在の実装では * に関し
    ては backtracking を recursive call で実現している様だが、extglob に関して
    は諦めている。

  ------------------------------------------------------------------------------

  [試験実装]

  * done: 中断機能を付ける必要がある
    if (interrupt_state || terminating_signal)
     return FNM_NOMATCH;

    pattern の解析に対してもこのようにしても良いかもしれないが、其処まで時間が
    かかることもない気がするので取り敢えず無視する。

  * done: extglob_refs は遅延初期化で良い気がする。

  * done: interface を変更する やはり range で受け取る様にする。

  ----

  * 使われていないが実装するのか?
    glob_recursion_depth++;

  * 以下は忠実に再現するべきなのか。b) 一致自体を失敗させる c) 寧ろ extglob を
    off にして解析を続ける 等の方が良いのではないか。

    /\* If PREST is 0, we failed to scan a valid pattern.  In this
      case, we just want to compare the two as strings. *\/
    return (STRCOMPARE (p - 1, pe, s, se));

  * *(), +() の実装における注意。

    /\* If we're not matching the start of the string, we're not
       concerned about the special cases for matching `.' *\/
    lflags = (n == string) ? flags : (flags & ~(FNM_PERIOD|FNM_DOTDOT));

    これらは parse 時点で考慮に入れるべきなのか一致させている時に考慮に入れる
    べきなのか。@(...) 内部で処理している時にもこれを考慮に入れる必要があるの
    か (と思ったがこれは自動的にちゃんとトップレベルの状態が伝播する様になって
    いるので気にしなくて良い)。これは一致させている時に処理できる気がする。

  * 固定文字列に対しても完全に構築するのは効率が悪い。固定部分に関しては先に処
    理してしまうというのも手である。但しそれができるのは exact, prefix の時だけ
    の気がする。或いは middle でも開始位置を探すのに固定文字列を使える? 然し、
    そこから一文字ずつ読み取って行った時にちゃんとできるかは微妙。

  * 長大な pattern の場合でも states が現実的に巨大になることは余りない気がする。
    なので、states は最初はそんなに大きくないサイズにして可変長で増やすのが良い
    気がする。

  * done: 置換についても新しい関数を使う様にする。

    * done: zwidth match は除外する。

    match_upattern で何か非自明な事をしている。何か。MATCH_BEG 以外の時に先頭が
    * 以外の時に * を付加する。同様に MATCH_END 以外の時に末尾が * で終わってい
    ない時には * を付加する。

  * done: end star optimization
  * done: fixed length optimization
  * fixed string optimization

  [振る舞いの変化]

  $ a=hello; a=${a//''/x}; declare -p a
  declare -- a="hello"
  $ a=hello; a=${a//@()/x}; declare -p a
  declare -- a="xhxexlxlxo"

  It doesn't seem to be very consistent.  In the new implementation, both
  behaves in the following way on purpose:

  $ a=hello; a=${a//''/x}; declare -p a
  declare -- a="xhxexlxlxox"
  $ a=hello; a=${a//@()/x}; declare -p a
  declare -- a="xhxexlxlxox"

  2. !() does not match . or .. even when it is not at the beginning of the
    target string or after a slash?

    実装を見る限りは '!()' は . 及び .. などから始まる文字列には一致しないよう
    だ。'*' はこれらが文字列の開始位置または / の直後になければよかった。更に
    '/' は '*' の中では許されなかったが、'!()' の中では許される様である。色々変
    な気がする。

  * !(...) は現在の実装の方針だと全然駄目だという事が判明した。現在の実装では複
    数の NFA の内どれも末端に達していなければ accept という事になっている。然し
    これだと異なる位置で !() に進入したものを全部混ぜている。何処かの開始位置で
    ... が一致すれば、他の開始位置で ... に一致しない場合があったとしても、全体
    として失敗する事になる。実際に判定するべきは「何処かの開始位置で始めた場合
    に末尾に到達していない」場合に !(...) の次に進めるということである。

    a 進入した位置毎に別々に追跡を行う? と思ったがこれだと状態が N に比例して際
      限なく増加していく。これは DFA になっていないのは明らかである。

    b 或いは !() の中身だけは毎回判定する? と思ったがこれだと結局開始位置と終端
      位置の組み合わせで N^2 のパターンがあるので N^3 の時間スケールになってし
      まう。

      更に !() を入れ子にするともっと状況が悪くなる可能性がある。但しメモ化すれ
      ばそれでも N^3 に抑えられる気がする。メモ化を hash で行うとすれば
      N^3log(N) になる。

      そもそもこの場合でも進入した位置のリストを管理する必要がある。結局 a と同
      様に状態が N に比例して際限なく増えていく事になる気がする。

      或いはもっと賢くする方法はあるだろうか。。。

    c そもそも accept/reject の反転がどういう事かについて考えるべきの気がする。

      うーん。powerset を取る事によって DFA 化しても、反転がある事によって更に
      powerset を取る必要が出てくる。!() の入れ子の回数だけ powerset を取る必要
      があるので、大変な事になる。状態数が爆発しない為には状態数の最小化などを
      真面目に実装する必要が出てくる。

      或いは本当に powerset の powerset の ... を構築しても良いのかもしれない。
      最小化をしなくても何とかなるかもしれない。と思ったが状態の種類が直積で効
      いてくるという事はないだろうか。

    d reject: 或いは !() がある時には開始位置毎にループを回す様にすれば良いので
      は。と思ったがそれでも駄目である。subpattern !() の開始位置が色々に変わる
      のが問題なのであって、全体の開始位置を固定しても仕方がない。

    e 取り敢えずは * と同様に処理しておいて (但し !(...) の開始位置のリストは保
      持して) * を抜ける時の判定に !(...) を追加した物を考える。と思ったが、こ
      れは a や b で言っているのと余り変わらない気がする。

    f もし DFA の事を忘れたとして !(...) はどの様に実装するだろうか。例えば
      xxx!(f)yyy の場合には、f が駄目でも ff は許される。うーん。任意の場合に拡
      張できる様な方法は思い浮かばない。

    g うーん。!() の開始位置と終端位置のテーブルを作らなくても、現在位置を終端
      位置とする様な !(...) の内部の状態集合のリストを作っておけば良いのではな
      いか?

  * うーん。実は既存のコードにバグがあるという事が分かってしまった。

    $ bash -c '[[ b == [[=B=]][[:alpha:]] ]]'
    $ echo b | grep '[[=B=]][[:alpha:]]'

    →これは簡単な修正だった。

  * うーん。MATCH_ALL で有限一致の直後の空一致はするべきなのだろうか。元々の実
    装を見ると有限一致が文字列末端で起こった場合には次の一致は試みられないが、
    途中で発生した場合には同じ位置での空一致を許可する様である。

    $ bash-5.2 -O extglob -c 'x=aaa; echo "${x//?(a)/(&)}"'
    (a)(a)(a)
    $ bash-5.2 -O extglob -c 'x=aaab; echo "${x//?(a)/(&)}"'
    (a)(a)(a)()b

    同じ様に実装する事にした。と思ったがやはりやめた。上の動作は変だ。sed と同
    じ様に振る舞うべきである。

    $ ./bash -O extglob -c 'x=001;echo ${x//?(0)/(&)}'
    (0)(0)1()

2021-10-07

* ${var//pat} による置換が滅茶苦茶遅いという事について

  以下の時点で絶望的に遅くなる。

  * shopt -s extglob; printf -v v '%*s' 10000; time x=${v//' '?(x)}

    100   ... 3ms
    1000  ... 197ms
    10000 ... 167.5s

    恐らく n^3 でスケールしている。

  というか既に以下の場合でも O(n^2) である。shopt -u にしても同じ結果。

  * shopt -s extglob; printf -v v '%*s' 1000; time x=${v//' '}

    1000   real    0m0.005s
    10000  real    0m0.102s
    100000 real    0m9.810s

  * shopt -s extglob; printf -v v '%*s' 100000000; time [[ $v == ' '?(x) ]]

    これに関しては線形でスケールしている。

    10^8 0.513s
    10^7 0.046s
    10^6 0.004s
    10^5 0.002s
    10^4 0.000s

    従って extglob 自体が遅いという訳でもない様に思われる。

  調べてみると一致する度に RESIZE_MALLOCED_BUFFER でサイズの拡張を行っている。
  RESIZE_MALLOCED_BUFFER(p,len,room,size,inc) を確認すると現在の len+room>size
  の時に size+=n*inc して大きさを拡張している。

  然し今回の場合には ${v//' '} になっているので結果の文字列のサイズは 0 である
  ので RESIZE_MALLOCED_BUFFER が呼び出される訳ではない様に思われる。

  match_pattern の実装を確認すると…

  * mbsmbchar (string), mbsmbchar (pat) を用いて mbchar が含まれていないか確認
    している気がする。その為には恐らく全体を一回見なければならない筈で、そうす
    ると O(n^2) になるのは理解できる。

    更にもしも mbchar が含まれていた場合には wcs に変換するので更に速度が悪化す
    ると思われる。

    mbsmbchar で具体的に一体何をしているのか確認する事にする → やはり文字列を
    全て一旦走査している様だ。

  * extglob の時には更にもっと複雑な事になるのではないか。これについてはまた後
    で確認する事にする。

  2022-09-07 改めて見てみるとどうやら extglob の時には再帰的に通常の glob match
  (GMATCH @ lib/glob/sm_loop.c) を呼び出して処理している様だ。

