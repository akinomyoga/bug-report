

Intensional behavior changes

a. Now ${a//''/x} and ${a//@('')/x} behaves the same so that the
   character `x' is inserted to every character boudary including the
   beginnning and the end of the target string.  With the previous
   implementation, the former matches nothing, and the latter matching
   every boundary of the characters except for the end of the target
   string, which seems to be inconsistent.  The new behavior matches
   that of `sed' with the substitution s/\(\)/x/g [ Note: we cannot
   specify an empty pattern for s/.../.../ in sed because the empty
   pattern means the previous pattern. ]

   $ bash-5.2 -O extglob -c 'a=hello; echo ${a//""/-}'
   hello
   $ bash-5.2 -O extglob -c 'a=hello; echo ${a//@("")/-}'
   -h-e-l-l-o
   $ ./bash -O extglob -c 'a=hello; echo ${a//""/-}'
   -h-e-l-l-o-
   $ ./bash -O extglob -c 'a=hello; echo ${a//@("")/-}'
   -h-e-l-l-o-
   $ sed 's/\(\)/-/g' <<< hello
   -h-e-l-l-o-

   The test case `tests/new-exp.right' has been updated for this
   behavior change.

b. Now « a=01; echo ${a//?(0)/(&)} » does not match twice with the
   same end position.  With the previous implementation, ?(0) could
   match an empty substring between `0' and `1' after matching the
   substring `0'.  The new behavior matches that of `sed'.

   $ bash-5.2 -O extglob -c 'a=01; echo ${a//?(0)/(&)}'
   (0)()1
   $ ./bash -O extglob -c 'a=01; echo ${a//?(0)/(&)}'
   (0)1()
   $ sed 's/0\{0,1\}/(&)/g' <<< 01
   (0)1()

   To recover the original behavior for a. and b., see #ifdef
   SMATCH_COMPAT52_PATSUB in lib/glob/sm_loop.c.

c. When FNM_PATHNAME is specified, `*' cannot match path separators
   `/' in the new implementation.  In the previous implementation, `*'
   can match slashes even when FNM_PATHNAME is specified, while it is
   not the case in the fnmatch implementation.  I suspect the previous
   implementation does not actually try to support FNM_PATHNAME.  In
   the new implementation, I try to properly support FNM_PATHNAME so
   that the behavior is consistent with fnmatch.  The behaviors of
   three implementations are summarized below:

      | Pattern | String | fnmatch | prev | new |
      |:--------|:-------|:-------:|:----:|:---:|
      | *       | abcd   |    T    |  T   |  T  |
      | *       | .abc   |    F    |  F   |  F  |
      | *       | a/.d   |    F    |  T   |  F  |
      | *       | a/cd   |    F    |  T   |  F  |
      | s/*     | s/abc  |    T    |  T   |  T  |
      | s/*     | s/.ab  |    F    |  F   |  F  |
      | s/*     | s/..   |    F    |  F   |  F  |

      where `FNM_EXTMATCH | FNM_PATHNAME | FNM_PERIOD | FNM_DOTDOT'
      are specified as flags.  T and F mean `matching' and
      `unmatching', respectively.  fnmatch is tested in GNU/Linux,
      i.e., the behavior of fnmatch in the glibc implementation is
      shown.

   Also, treatments of path special characters (specified by
   FNM_PATHNAME, FNM_PERIOD, and FNM_DOTDOT) are properly applied to
   !(<subpat>) in the new immplementation; !(<subpat>) only matches
   substrings that can possibly match `*' and that <subpat> does not
   match.  In the previous implementation, the checks for those path
   characters are only performed for the first character of the
   substring.  In the new implementation, those path-character checks
   are applied to all the characters in the substring just like `*'.

      | Pattern    | String | prev | new |
      |:-----------|:-------|:----:|:---:|
      | !(x)       | abcd   |  T   |  T  |
      | !(x)       | .abc   |  F   |  F  |
      | !(x)       | a/.d   |  T   |  F  |
      | !(x)       | a/cd   |  T   |  F  |
      | s/!(x)     | s/abc  |  T   |  T  |
      | s/!(x)     | s/.ab  |  T   |  F  |
      | s/!(x)     | s/..   |  T   |  F  |

   We observe that `s/!(x)' matches `s/.ab' in the previous
   implementation even though `!(x)' does not match `.abc'.  This is
   not a natural behavior.  The new implementation tries to make it
   consistent with `*' of fnmatch.

   See `#ifdef SM_COMPAT44_NEGPATH' and `#ifdef SM_COMPAT52_NEGPATH'
   in lib/glob/sm_loop.c for the related code, though the old behavior
   is not faithfully implemented.  I would implement it if the old
   behavior is strongly requested, but I currently feel there is no
   reason to implement the old behavior.

API changes

* The following functions were not limited in the file scope (i.e.,
  the keyword `static' is not specified) but removed because they are
  not used with the new implementation.  However, if any loadable
  buitlins directly use any of these functions, that loadable builtin
  will fail to find the corresponding function.

  #include "externs.h"

  int match_pattern_char (char *, char *, int);
  int umatchlen (char *, size_t);
  int match_pattern_wchar (wchar_t *, wchar_t *, int);
  int wmatchlen (wchar_t *, size_t);

  int internal_strmatch (char *pattern, char *string, int flags);
  int internal_wstrmatch (wchar_t *pattern, wchar_t *string, int flags);

Possible adjustments, refactoring, and optimizations

a. Renaming functions and macros---Of course, the function names and
   macro constant names may be changed if there are any requests.

b. Dropping optimizations---I have implemented the optimizations for
   1) fixed-length patterns [see #ifdef SMATCH_OPTIMIZE_FIXLEN in
   lib/glob/sm_loop.c] and 2) * at the end of the pattern string [see
   #ifdef SMATCH_OPTIMIZE_ENDSTAR in lib/glob/sm_loop.c].  These would
   improve the performances when the pattern and target strings,
   respectively, are very long.  However, I think the improvements are
   not visible for typical lengths of strings in the shell uses.  For
   this reason, these optimizations might be dropped to reduce the
   binary size.

c. Dropping FNM_LEANDING_DIR---Maybe the support for FNM_LEADING_DIR
   (the extension of GNU fnmatch) could be dropped because it is not
   used in the Bash codebase but complicates the implementation of
   XCSNAME(dfa_match_accept).  Another possibility would be to modify
   the pattern string to suffix ?(/<op>) when FNM_LEADING_DIR is
   present where <op> matches any strings (that may contain `/' and
   `.' even when FNM_PATHNAME, etc. are specified).

d. rmatch---Currently, every matching is performed from the beginnings
   of the pattern and target strings, but FNM_MODE_SUFFIX_GREEDY and
   FNM_MODE_SUFFIX_MODEST might be implemented so that matching is
   more efficiently attempted from the ends of the pattern and target
   strings.
