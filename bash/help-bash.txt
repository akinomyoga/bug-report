----------------------------------------------------------------------
2021-02-07 Bash minifiers [H0003]

以下は書きかけて止めた文章

https://lists.gnu.org/archive/html/help-bash/2021-02/msg00013.html

# In this sense, in compiler languages, it is even easier to change
# variable and function names because everything can be statically
# analyzed usually (if one ignores the effects on reflections, the
# feature some languages have), but I think the corresponding
# minifiers are less popular because one can just distribute binaries
# if one wants to hide the source code.


----------------------------------------------------------------------
2021年1月18日(月) 12:32 IFo Hancroft <lists@ifohancroft.com>:
> What you want (the ability to reposition the cursor in the terminal
> with a mouse click) can be done with just the terminal itself.

I think Mike wanted to move the current text insertion point in
Readline (or, in other words, the command line of Bash) but not just
move the current cursor position in the terminal.  If the terminal
just moves its cursor position without sharing the information with
the application (i.e., Bash in this case), the result would be just
broken rendering.

So, this does have something to do with Bash or any text editors
working in terminals.  In fact, recent versions of Emacs and Vim
supports mouse using the mouse escape sequences of terminals.  A
terminal application (such as Bash or text editors) could receive from
the terminal the mouse events encoded in terminal sequences, move its
internal cursor position, render the updated text content and move
the terminal cursor position by sending escape sequences to the
terminal.

There has been some attempt to support the mouse in zsh:

https://unix.stackexchange.com/questions/444601/any-terminal-shell-with-mouse-support

but I think this implementation is not robust.  For example, I think
this doesn't work when there are wide characters in the command line
or the text content doesn't fit into a single terminal line.

Actually, there is some practical problem of supporting mouse by
shells: the shell is not a full-screen terminal application so that
it cannot handle the mouse events that occurred outside the command
line.  So, one needs to compromise with some features or integrate
something like terminal multiplexers in the shell to manage all the
terminal contents in the shell.  There were some discussions in Oil
Shell:

https://oilshell.zulipchat.com/#narrow/stream/121539-oil-dev/topic/Playing.20With.20Debuggers
https://oilshell.zulipchat.com/#narrow/stream/121540-oil-discuss/topic/non-linear.20shell.20UI

--
Koichi


----------------------------------------------------------------------
https://lists.gnu.org/archive/html/bug-bash/2021-01/msg00031.html

This topic actually pops up occasionally.  FYI, you can also see the
following discussions:

https://lists.gnu.org/archive/html/bug-bash/2014-06/msg00003.html
https://lists.gnu.org/archive/html/bug-bash/2014-10/msg00154.html
https://lists.gnu.org/archive/html/bug-bash/2015-02/msg00066.html

2021年1月8日(金) 18:21 Oğuz <oguzismailuysal@gmail.com>:
> `(( assoc[\$key]++ ))' works as usual, but this is not documented as
> far as I know,

This is explained in the first link above by quoting two sentences in
the document, but I agree with you that this is so non-trivial that
it's worth explicitly documenting IMHO.

> Considering that the following two works, it doesn't make much sense
> that `(( assoc[$key]++ ))' doesn't.

I think the POSIX expansion order should be applied to, for example,
$((assoc[$key]++)).  In this case the arithmetic evalution of the
whole expression should be performed only after $key in
$((assoc[$key]++)) is expanded.  There is no reason to introduce a
different expansion rule of `((...))' from that of `$((...))'.  So, it
feels a bit strange to me to expand `$key' in `(( assoc[$key]++ ))'
after determining the arithmetic structure thinking the normal
expansion order.

> It would be better if at least quoting the key by means of parameter
> transformation or `printf %q' worked, because these are the first
> workarounds that come to mind;

This is maybe a good idea.  From Bash 5.1, the single quotation "'" is
not a subject to the quote removal of `(( ... ))', so we can use the
single quotation as a part of the arithmetic expression.  We can just
introduce the string literal of the form '...' or $'...' in the
arithmetic evaluator.

--
Koichi


----------------------------------------

2021年1月8日(金) 20:07 Oğuz <oguzismailuysal@gmail.com>:
> On Fri, Jan 8, 2021 at 2:14 PM Koichi Murase <myoga.murase@gmail.com> wrote:
>> There is no reason to introduce a different expansion rule of
>> `((...))' from that of `$((...))'.
>
> But there already is a different expansion rule. While `((
> assoc['$key']++ ))' works, `: $(( assoc['$key']++ ))' fails with a
> bad subscript error.

Actually, that inconsistency has been fixed in Bash 5.1 to match with
the behavior of `$(( assoc['$key']++ ))', i.e., now in Bash 5.1, `((
assoc['$key']++ ))' doesn't work either.  So, `(( assoc[\$key]++ ))'
is the only working way to access the associative array in the
arithmetic command of the form `(( ... ))'.  Or, maybe you could write
`let 'assoc[$key]++'`.

--
Koichi


----------------------------------------------------------------------
https://lists.gnu.org/archive/html/bug-bash/2021-01/msg00005.html

Happy new year!

2021年1月2日(土) 20:44 felix <felix@f-hauri.ch>:
> ( Under 4.2.37(1)-release, I get: ``-bash: a[$i]: bad array subscript'' )
>
> But with ``my'' 5.0.3(1)-release, as with new 5.1.4(1)-release, no
> error...

Negative array subscripts are indeed a new feature of Bash 4.3.  From
the changelog (http://tiswww.case.edu/php/chet/bash/CHANGES):

> This document details the changes between this version,
> bash-4.3-alpha, and the previous version, bash-4.2-release.
>
>
> [...]
>
> 3.  New Features in Bash
>
> [...]
>
> x.  The shell now allows assigning, referencing, and unsetting
>     elements of indexed arrays using negative subscripts (a[-1]=2,
>     echo ${a[-1]}) which count back from the last element of the
>     array.

----

> Where 5th value is 45 instead of -12 and 6th is 36 instead of -21
>  45 + 12 = 57,  36 + 21 = 57 ... (highest submited value was 56!)??

The index -1 corresponds to the highest index, so a negative index
"-O" corresponds to the index "H-O+1" where H is the highest index, so
the behavior that -12 and -21 correspond to 56-12+1=45 and 56-21+1=36,
respectively, is the correct one. Or in another way of thinking, when
the highest index is 56, the number of elements in a hypothetical
dense array a[0]..a[56] is N=57, so -12 and -21 correspond to N-12=45
and N-21=36.

--
Koichi


----------------------------------------------------------------------
2020-12-23 Bash quirks for write attempts to readonly variables [H0002]

これは Oil での議論である。readonly にアクセスした時の bash の振る舞い
がおかしくないかという話。

https://oilshell.zulipchat.com/#narrow/stream/121540-oil-discuss/topic/quirk.20in.20bash.20error.20handling.20between.20simple.20.2F.20list
https://gist.github.com/abathur/8d18853e06f2a8cf3a97e45acda17f68
https://gist.github.com/akinomyoga/d5225097548fdb97450c9a6748f63884

報告されている振る舞いは丁度 alias の時と同じ状況で起こっている様だ。
つまり、readonly 変数に対する代入によって停止する処理は、parse のレベ
ルで起こるという事である。

set -u による停止や ${var?error} による停止も同様に振る舞っているので
はないか? と考えたが、これらは完全にスクリプトを終了する様である。osh
のテストに依ると他のシェルもスクリプトを完全に終了する様に動作している。

POSIX を調べたら readonly な変数に代入を試みると


----------------------------------------------------------------------
2020-12-19 Reduce forks for batch chmod [H0001]

https://lists.gnu.org/archive/html/help-bash/2020-12/msg00013.html

The bottleneck here is not `while read`.  Although `while read` is a
relatively slow one among the bash builtin features, it is still
faster than spawning processes.  Using a separate Bash script even
increases the number of spawns so will eventually slow down the whole
processing.

To improve the performance, one should first reduce the number of
spawns (i.e., the number of the calls of external commands).  For
example, if you can use Bash-specific features in your script, you may
write it something like the following way (see Note below):

  #!/bin/bash
  shopt -s lastpipe
  find "$WIKI_DIR" -type f -print0 | # 1 fork, 1 exec
    mapfile -d '' -t filenames
  printf '%s\0' "${filenames[@]}" |  # 1 fork
    xargs -0 -P 1 file -b |          # 1 fork, 1 exec
    mapfile -t filetypes
  executables=()
  normalfiles=()
  for ((i=0;i<${#filenames[@]};i++)); do
    case ${filetypes[i]} in
    (*executable*|*script*) executables+=("${filenames[i]}") ;;
    (*)                     normalfiles+=("${filenames[i]}") ;;
    esac
  done
  ((${#executables[@]})) && echo chmod u=rwx,g=rx,o= "${executables[@]}" # 1 fork
  ((${#normalfiles[@]})) && echo chmod u=rw,g=r,o=   "${normalfiles[@]}" # 1 fork

Note: I haven't tested the above code thoroughly, and also it uses
"mapfile -d ''" (separate stdin by \0) of Bash 4.4.  Since the Bash
version in CentOS 7 seems to be Bash 4.2, it needs to be adjusted
anyway.  If the filenames can be assumed not to contain newlines,
\n's, one can just separate the result of find by newlines.

--
Koichi


----------------------------------------------------------------------
2020-12-08 Bash version strings embedded in binary

2020年12月8日(火) 10:04 Testing Purposes <raspberry.teststream@gmail.com>:
> Description:
>
>         I just built Bash 5.1 [...], I ran "gdb bash" and entered
> "print /x (int) rl_readline_version".  I get "0x801" as the output.
> If I do the same thing with Bash 5.0, I get "0x800".
>
> However, readline's online documentation at
> https://tiswww.case.edu/php/chet/readline/readline.html#SEC25 - and
> the "rltech.texi" file in the source code - both indicate that the
> version code format should be slightly different:

1) First of all, the value of `rl_readline_version' is embedded in
`bash' in the binary format, so it is meaningless to discuss whether
that binary data is `0xMMmm' or `0xMmm'.

2) Next, the manual talks about the literal contained in the macro
`RL_READLINE_VERSION' (defined in `lib/readline/readline.h'), which is
nothing to do with the binary value of `rl_readline_version'.  In
fact, the macro value of `RL_READLINE_VERSION' in `readline.h' is
correctly in the format of 0xMMmm as described in the manual.

  $ grep RL_READLINE_VERSION lib/readline/readline.h
  #define RL_READLINE_VERSION     0x0801          /* Readline 8.0 */

Because the information on the literal format used in the source code
is lost in the executable `bash', you need to explicitly specify the
format `0xMMmm' (i.e. %04x) to gdb like this:

(gdb) printf "%04x\n", (int) rl_readline_version
0x0801

--
Koichi

----------------------------------------------------------------------
2020-09-14

https://lists.gnu.org/archive/html/bug-bash/2020-09/msg00039.html

> simply run a readline function among lines codes of bash script such
> a menu-complete, or previous-history repeated thrice, or etc

What is not clear is not how you call the readline function, but what
kind of ``script'' do you assume?

a. If it is the normal executable script which can be used as
  `./script.sh', the question doesn't make sense because there is no
  command line and no readline.  Readline is only enabled in a
  interactive session of Bash.  So one can guess that you are either
  asking how to enable the readline in a script, or talking about some
  other type of scripts that you haven't explained.

b. If you want to enable readline and accept user inputs, you can use
  `read -e' as Greg's wrote.  If you want to control the detailed
  behavior of `read -e' (i.e., how it behaves for each keystroke) by
  Bash scripts, the answer is it's not possible.

c. Maybe you are thinking of sourcing a script in an interactive
  shell, such like

  $ source script.sh

  In this case, it is still unclear what you want to do because the
  readline is inactive on the command execution.  There is no prompt
  or command line when the user command is not shown.

d. Another possibility is that you are talking about the shell
  commands executed in `bind -x '"keyseq":unix-command''.  In this
  case, it is impossible to invoke a readline function directly from
  the shell commands.  But some limited class of mixed operations can
  be implemented by using the `bind '"...":"..."'` macro.

e. Or maybe you are thinking of a completely different type of
  ``script''?

--
Koichi

| But, some limited class of mixed operations (i.e,. fixed sequences
| of readline functions and shell commands) can be run by using the
| macro defined by `bind '"...":"..."''.  For example, let's consider
| running the following commands in order by pressing `\C-t':
|
|   1. shell-command-1
|   2. readline-function-1
|   3. shell-command-2
|   4. readline-function-2
|   5. shell-command-3
|
| You can setup your bashrc in the following way.
|
|   bind '"\C-t":"\e[?1~\e[?2~\e[?3~\e[?4~\e[?5~"'
|   bind -x '"\e[?1~": shell-command-1'
|   bind    '"\e[?2~": readline-function-1'
|   bind -x '"\e[?3~": shell-command-2'
|   bind    '"\e[?4~": readline-function-2'
|   bind -x '"\e[?5~": shell-command-3'
|
| Here \e[?1~..\e[?5~ are some arbitrary *unused escape sequences* you
| like.
|
| [ Note on Compatibility: In older versions of Bash, there are many
| bugs related to `bind -x', so you want to use a recent version of
| Bash.  At least, you need to use Bash 4.3+ because the keyseq in
| `bind -x' with more than two bytes will not work in Bash 4.2 and
| before and the codespace of two-byte *unused escape sequence* is
| limited. ]
|
| I haven't tried, but I think, in principle, this technique can be
| extended to handle dynamically chaging sequence of operations by
| dynamically redefining the key bindings inside the shell commands
| while running the macro, but it will be really involved.

----------------------------------------------------------------------
2020-09-09
https://lists.gnu.org/archive/html/help-bash/2020-09/msg00003.html

2020-09-10 8:04 Chris Elvidge <celvidge001@gmail.com>:
> I've recently come across a crontab line:
> 0 */6 * * *     /usr/bin/modprobed-db store &> /dev/null

`&>' is an extension to the POSIX shell, and the default setting of
cron doesn't necessarily contain SHELL=/bin/bash.  For example, Ubuntu
by default seems to use /bin/sh (dash) to run crontab.  If you want to
use `&>' in crontab, you need to make it sure that "SHELL=/bin/bash"
is set in the crontab.

> I've also read that '&> /dev/null' is outdated and should be replaced
> with '>/dev/null 2>&1'
>
> True? And exactly why?

I'm also interested in whether it is really outdated and should not be
used.

I can find some discussion on the first item on the page
https://wiki.bash-hackers.org/scripting/obsolete .  The page says that
it is because `&>' has a different unintended meaning in POSIX shell,
but I think the discussion doesn't apply when one consciously writes
Bash scripts (but not POSIX scripts).  If you cannot use any
constructs that have a different meaning in the POSIX shell, you can
never use arithmetic commands `((...))'  for example.

I don't know other sources of the recommendation.  AFAIK, the Bash
manual doesn't mark it as deprecated nor obsolete.  Bash even added a
new variant `&>>' in version 4.0, so I guess they are not considered
outdated by the developer side.

--
Koichi

------------------------------------------------------------------------------
2020-09-10

2020-09-10 9:10 Chris Elvidge <celvidge001@gmail.com>:
> I've used 'return $((!$#))' and 'return $[!$#]' to return an error
> if no parameters given to function.

You can use

  (($#)) || return

With the above command, (($#)) fails with no parameters so that the
next command `return' is executed.  When `return' is called without
arguments, it uses $?, the exit status of the previous command, for
the function's exit status.  If you want to use the function in trap
handlers you need to explicitly specify the exit status as

  (($#)) || return "$?"

because, in trap handlers, `return' without arguments returns the exit
status of the previous command *outside the trap handler* in Bash
4.4+.

> However 'N=0; echo $((!$N))' gives an error at the bash prompt. 'echo
> $[!$N]' echo's 1 as expected.

This is because the construct `!...' is subject to history expansions
in interactive sessions.  You command `echo $((!$N))' will be first
expanded to `echo $((<LAST_ARGUMENT_IN_HISTORY>N))', and then the
arithmetic evaluation will be performed.  If you don't use history
expansions, you can turn it off by putting `set +H'.

The reason why `$[!$N]' didn't cause history expansions was just
because the history expansion skips the string of the form `[!...]'
which resembles the glob pattern.  It is an accidental pattern
coincidence, and $[...] cannot be always used to suppress history
expansions.  For example, `echo $[a=!$N]' is a target of the history
expansion and will cause errors.

> My question - is $[...] actually obsolete? If so, what should I use at
> the bash prompt to get the same effect?

Yes, it is obsolete.  It is a Bash-1 feature and not documented in the
current Bash manuals (Bash-2.0+).

--
Koichi

----------------------------------------------------------------------
2020-09-05

https://lists.gnu.org/archive/html/help-bash/2020-09/msg00000.html

2020-09-05 14:19 Peng Yu <pengyu.ut@gmail.com>:
> I use homebrew to install bash. But I don't find a way to
> automatically install bash loadables and set the corresponding
> enviroment in homebrew. Does anybody know if this is possible?
> Thanks.

I'm not sure because I don't have macOS, but I guess the loadable
builtins are already installed when you installed the latest bash with
homebrew because it seems the brew formula for bash just runs
`make install'.

  https://github.com/Homebrew/homebrew-core/blob/master/Formula/bash.rb#L65-L66

I guess the loadable builtins are located in some path like

  /usr/local/Cellar/bash/5.0.18/lib/bash

If the loadables are located in the above path, I think you can use
the following setting:

  BASH_LOADABLES_PATH=/usr/local/Cellar/bash/5.0.18/lib/bash

--
Koichi

----------------------------------------------------------------------
