# ★UTF-8

From: Koichi Murase <address@hidden>
To: bug-bash@gnu.org
Subject: Exit status by no-argument `return' for function calls in trap handlers

Configuration Information [Automatically generated, do not change]:
Machine: x86_64
OS: linux-gnu
Compiler: gcc
Compilation CFLAGS: -O2 -g -pipe -Wall -Werror=format-security
  -Wp,-D_FORTIFY_SOURCE=2 -Wp,-D_GLIBCXX_ASSERTIONS -fexceptions
  -fstack-protector-strong -grecord-gcc-switches
  -specs=/usr/lib/rpm/redhat/redhat-hardened-cc1
  -specs=/usr/lib/rpm/redhat/redhat-annobin-cc1 -m64 -mtune=generic
  -fasynchronous-unwind-tables -fstack-clash-protection -fcf-protection
  -Wno-parentheses -Wno-format-security
uname output: Linux chatoyancy 5.1.20-300.fc30.x86_64 #1 SMP Fri Jul
  26 15:03:11 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux
Machine Type: x86_64-redhat-linux-gnu

Bash Version: 5.0
Patch Level: 11
Release Status: release

Summary:

  The behavior of no-argument `return' in trap handlers has been
  changed from Bash 4.4 to follow the description of POSIX.  Recently
  this behavior caused problems in my Bash script.  I am wondering
  whether this change actually matches with the behavior meant by
  POSIX because the change introduces unreasonable constraints in
  writing shell functions.

  For the condition of this special treatment of `return', POSIX says
  ``When return is executed in a trap action''.  Here are two possible
  interpretation: (A) `return's specified in the argument string of
  `trap' builtin are affected, or (B) all the `return's in entire
  runtime function-call tree in trap processing are affected.  I guess
  that POSIX wanted to provide a way to exit functions that received
  signals without changing the value of `$?'.  If that is the case,
  the POSIX should have meant (A).  However, the current Bash
  implementation behaves as if it follows the interpretation (B).

  I would like to hear what do you think of this.

Description:

  In the latest release of Bash 5.0.16 and in the current devel
  branch, when function calls in trap handlers are terminated by
  no-argument `return' builtin, the exit status is always the value of
  $? at the moment that the trap handler started.  This behavior was
  introduced in Bash 4.4.

  I noticed this behavior in debugging an infinite loop caused by
  SIGWINCH reported at https://github.com/akinomyoga/ble.sh/issues/48.
  The structure of the code related to the infinite loop can be
  summarized in the following small script.

  ----------------------------------------
  #!/bin/bash

  function check_loop_condition {
    if ((index++%10==0)); then
      echo index=$index
      ((index<100))
      return # *** return exit status of the previous command ***
    fi

    : do something
    return 0
  }

  function update {
    local index=0
    while check_loop_condition; do :; done
  }

  trap 'update' USR1
  kill -USR1 $$
  ----------------------------------------

  If the function `update' is called normally (outside of trap
  handlers), it will print the numbers {1..101..10} and terminate
  soon.  However, when it is called in trap handlers, it falls into an
  infinite loop in Bash 4.4+.  This is because the no-argument
  `return' in the function `check_loop_condition' always returns `$?'
  before the trap started regardless of the exit status of
  `((index<100))'.

  If all the `return's in the entire function-call tree are affected
  in trap processing as in the interpretation (B), one cannot reliably
  use no-argument `return' to return the last-command exit status.  To
  avoid the problem, one has to always write the exit status
  explicitly as `return $?', and there is no use case for no-argument
  `return' at all.  I don't think this is meant by POSIX which defines
  the behavior of no-argument `return' explicitly.  Or, maybe one
  cannot use shell functions in trap handlers.  Note that in my
  script, I need to re-render the terminal contents on SIGWINCH so
  that I need to run complicated shell programs implemented as shell
  functions.  POSIX does not prohibit the use of shell functions in
  trap handlers.

  Here I checked how the behavior was changed in Bash 4.4.  The
  related commits are 939d190e0 (commit bash-20140314 snapshot) and
  e2f12fdf5 (commit bash-20140321 snapshot).  The relevant ChangeLog
  is quoted as follows:

  >            3/11
  >            ----
  > 
  > builtins/common.c
  >   - get_exitstat: when running `return' in a trap action, and it is not
  >     supplied an argument, use the saved exit status in
  >     trap_saved_exit_value.  Fixes Posix problem reported by
  >     Eduardo A. Bustamante L坦pez <address@hidden>
  > 
  > 
  >            3/18
  >            ----
  > 
  > builtins/common.c
  >   - get_exitstat: update fix of 3/11 to allow the DEBUG trap to use the
  >     current value of $? instead of the value it had before the trap
  >     action was run.  This is one reason the DEBUG trap exists, and
  >     extended debug mode uses it.  Might want to do this only in Posix
  >     mode

  This change is made after the following discussion:

  https://lists.gnu.org/archive/html/bug-bash/2014-03/msg00053.html

  Taking the following comment and the code example by the original
  reporter Eduardo, he seems to assume the interpretation (A), but
  what was actually implemented was the interpretation (B).

  > So as I read it, `action' refers to the whole string.

  Also, I have checked the behavior of other shells. `zsh', `ash'
  family (dash/ash, busybox sh) and `posh' does not implement the
  special treatment of `return' in trap handlers.  `ksh' family
  (ksh93, mksh) and `yash' implements the interpretation (B).  There
  is no existing implementation of (A).  But currently I still think
  the intepretation (A) is reasonable.  If there is rationale for the
  interpretation (B), I would like to know it.

Repeat-By:

  Here I provide a few test cases for the special treatment of
  no-argument `return'.  The following example demonstrates the
  behavior of no-argument `return' appearing directly in the trap
  argument.  The expected result is `exit=0' but not `exit=222' as
  `return' should return the exit status before the trap handler
  starts as required by POSIX.  Bash 4.3 and before outputs `exit=222'
  because it does not implement the special treatment.  Bash 4.4 and
  later ourputs `exit=0' as expected.

  ----------------------------------------
  #!/bin/bash

  setexit() { return "$1"; }
  trap 'setexit 222; return' USR1

  process() { kill -USR1 $$; }
  process
  echo exit=$?
  ----------------------------------------

  The next example also demonstrates the behavior of no-argument
  `return' directly specified in the trap argument.  The expected
  result is to print `exit=0'.  Bash 4.3 and earlier outputs
  `exit=123', and Bash 4.4 and later outputs `exit=0' as expected by
  POSIX.

  ----------------------------------------
  #!/bin/bash

  function setexit { return "$1"; }

  trap 'setexit 123; return' USR1

  function loop { while :; do :; done; }

  function get_loop_exit { loop; echo "exit=$?"; }

  { sleep 1; kill -USR1 $$; } &
  get_loop_exit
  ----------------------------------------

  The third example is the case for `return' in function calls in trap
  processing.  If we adopt the interpretation A (B), the expected
  result is `A' (`B').  Bash 4.3 and earlier outputs `A', and Bash 4.4
  and later outputs `B'.

  ----------------------------------------
  #!/bin/bash

  check() { false; return; }
  handle() { check && echo B || echo A; }
  trap handle USR1
  kill -USR1 $$
  ----------------------------------------

Fix:

  I attach a patch which changes the behavior to match with the more
  reasonable interpretation (A).  To detect the current nest level of
  returns, I initially thought about using the variable
  `return_catch_flags', but it turned out that the variable also
  counts the levels of `evalstring' so I decided to use `funcnest +
  sourcenest' instead.  The patch is tested with the above four cases.

--
Koichi

------------------------------------------------------------------------


2020-04-19 5:12 Chet Ramey <address@hidden>:
> The POSIX wording seems straightforward and implies (B). The
> `action' is a string that is defined to behave as if it were the
> argument to `eval', so it can be an arbitrary command, which makes
> (A) unlikely.
>
> You could always ask the austin-group list for an interpretation, or
> send me something that I could forward to the list for you.

Thank you for the suggestion.  Is <austin-group-l@opengroup.org> the
mailing list you mentioned above?  I have created an account in
opengroup.org and subscribed to the mailing list.  I will later write
a question on wording of `return' special builtin in that list.

> That's an unreasonable statement, throwing out all uses of return without
> an argument because of how it behaves while running a trap.

OK.  I agree that for the shell functions that will not be used in
trap handlers, no-argument `return' can be used without problems.

Actually the situation in my script (ble.sh) is a little bit special.
In my script, some parts of Bash features are emulated.  I run `eval
-- "$PROMPT_COMMAND"' in SIGWINCH handler where `PROMPT_COMMAND' is
specified by users so is not under the control of the script but under
the control of the user.  Naively, with interpretation (B), I need to
put restrictions on the commands that can be specified in
`PROMPT_COMMAND', on which there are no restrictions in the original
Bash.  The use of no-argument `return' is common, and such
restrictions are non-trivial for users.  In fact, there are already
existing Bash configurations, that use no-argument `return' in
`PROMPT_COMMAND', which I would like to support with my script.  One
example is `bash-preexec' (https://github.com/rcaloras/bash-preexec)
which aims to provide a feature like `preexec' and `precmd' hooks of
zsh.  `bash-preexec' uses no-argument `return'.  The configuration
provided by iTerm2 for shell--terminal integration also uses this
`bash-preexec' framework.

I would appreciate it if you could provide me some suggestion on other
ways to work around the general problems caused by such user-provided
`PROMPT_COMMAND'?

2020-04-17 2:21 Koichi Murase <address@hidden>:

>   Also, I have checked the behavior of other shells. `zsh', `ash'
>   family (dash/ash, busybox sh) and `posh' does not implement the
>   special treatment of `return' in trap handlers.  `ksh' family
>   (ksh93, mksh) and `yash' implements the interpretation (B).  There
>   is no existing implementation of (A).  But currently I still think
>   the intepretation (A) is reasonable.  If there is rationale for
>   the interpretation (B), I would like to know it.

Let me correct this paragraph. Actually `zsh', `dash' and `busybox'
implement the behavior of the interpretation (A).  After my previous
email, I noticed that there was an oversight in testing the shells.
With the attached script `0015-test4.sh',

$ bash 0015-test4.sh
In trap-argument: last command preceding the trap action
In a function call: last command preceding the trap action
$ bash-4.3 0015-test4.sh
In trap-argument: last command in the trap action
In a function call: last command in the trap action
$ zsh 0015-test4.sh
In trap-argument: last command preceding the trap action
In a function call: last command in the trap action
$ dash 0015-test4.sh
In trap-argument: last command preceding the trap action
In a function call: last command in the trap action
$ busybox sh 0015-test4.sh
In trap-argument: last command preceding the trap action
In a function call: last command in the trap action
$ mksh 0015-test4.sh
In trap-argument: last command preceding the trap action
In a function call: last command preceding the trap action
$ ksh 0015-test4.sh
In trap-argument: last command preceding the trap action
In a function call: last command preceding the trap action
$ yash 0015-test4.sh
In trap-argument: (failed to exit the function)
In a function call: last command preceding the trap action
$ posh 0015-test4.sh
In trap-argument: last command in the trap action
In a function call: last command in the trap action

which can be summarized in the following list:

Interpretation A: zsh, dash, busybox
Interpretation B: bash-5.0, ksh, mksh
Interpretation B (broken): yash
Not implemeted: bash-4.3, posh

--
Koichi

------------------------------------------------------------------------


From: Koichi Murase <address@hidden>
To: austin-group-l@opengroup.org
Subject: XCU 2.14: Exit status by no-argument `return' in shell trap handlers

I have a question on the POSIX behavior of `return' shell builtin
without arguments when used in a shell `trap' action.  I initially
came to this question on investigating an infinite-loop issue reported
by Silvio Knizek at

  https://github.com/akinomyoga/ble.sh/issues/48 .

Then, I reported the issue in bug-bash mailing list where I was
introduced to the austing-group list by Chet.  This is the thread:

  https://lists.gnu.org/archive/html/bug-bash/2020-04/threads.html#00089


The corresponding section in POSIX is as follows:

> [XCU 2.14 Special Built-In Utilities - return - EXIT STATUS]
>
> The value of the special parameter '?' shall be set to n, an
> unsigned decimal integer, or to the exit status of the last command
> executed if n is not specified. If n is not an unsigned decimal
> integer, or is greater than 255, the results are unspecified. When
> return is executed in a trap action, the last command is considered
> to be the command that executed immediately preceding the trap
> action.

What does ``When return is executed in a trap action'' exactly mean?
There can be two interpretations: (A) `return's specified in the
argument string of `trap' builtin (or, more specifically, `return's
which terminate the trap action) are affected, or (B) all the
`return's in an entire runtime function-call tree in trap processing
are affected.  Literally, it reads like the interpretation (B), but it
seems unreasonable.

- If this exception of `return' in trap actions aims to provide a way
  to recover the value of $? before the trap handler is invoked, the
  behavior (A) is enough, and there is no need to affect every
  `return's in the function-call tree as in (B).

- If the behavior of no-argument `return's can be changed in functions
  as in (B), one cannot reliably use no-argument `return's in the
  functions that can be possibly be used in trap handlers.  Actually
  this caused the infinite loop I mentioned above in Bash 5.0 which
  implements the interpretation (B).  With interpretation (B), it
  seems hard to work around it properly.

- If the literal interpretation (B) is correct, what is the use case
  of this behavior, or what is the rationale for this behavior?


In fact the implementation in shells varies.  I have tested using the
following script:

  # 0015-test4.sh

  setexit() { return "$1"; }
  invoke() { kill -USR1 $$; return 222; }

  trap 'setexit 111; return' USR1
  invoke
  case $? in
  (0)   echo 'In trap argument: last command preceding the trap action' ;;
  (111) echo 'In trap argument: last command in the trap action' ;;
  (222) echo 'In trap argument: (failed to exit the function)' ;;
  (*)   echo 'In trap argument: (unexpected)' ;;
  esac

  stat=99
  handler() { setexit 111; return; }
  trap 'handler; stat=$?; return' USR1
  invoke
  case $stat in
  (0)   echo 'In function call: last command preceding the trap action' ;;
  (111) echo 'In function call: last command in the trap action' ;;
  (*)   echo 'In function call: (unexpected)' ;;
  esac

`zsh-5.7.1', `dash-0.5.10.2' and `busybox-1.28.3 implements the
interpretation (A) which produces the following result:

  In trap argument: last command preceding the trap action
  In function call: last command in the trap action

`bash-4.4', `ksh-2020.0.0' and `mksh R57' implements the
interpretation (B) which produces the following result:

  In trap argument: last command preceding the trap action
  In function call: last command preceding the trap action

`bash-4.3' and `posh-0.13.2' does not implement the special treatment
in a trap action.

  In trap argument: last command in the trap action
  In function call: last command in the trap action

`yash-2.49' seems to try to implement the interpretation (B), but it
behaves differently from other shells.

  In trap argument: (failed to exit the function)
  In function call: last command preceding the trap action

  It seems `yash' fails to follow the following description.

  > XCU 2.14 Special Built-In Utilities - trap - DESCRIPTION
  >
  > Each time trap is invoked, the action argument shall be processed
  > in a manner equivalent to:
  >
  > eval action

--
Koichi Murase

------------------------------------------------------------------------


2020-04-19 15:21 Oğuz <address@hidden>:
> The same document you linked says:
>
> > If the shell is not currently executing a function or dot script, the
> > results are unspecified.
>
> in DESCRIPTION section; it's unspecified what those returns do.

Thank you for the comment, but I am confused.  In both two examples
that I provided, it actually running a function when `kill' is called,
i.e. `kill' is called when `invoke' is executed.  Then the trap
handler is invoked while executing the function.

If that is not the correct interpretation [i.e., the function is not
considered currently executed while the trap handler is processed, and
the description on `return' applies only to `return's appearing in the
function calls inside the trap action], then it is the third
interpretation:

(C) The `return's in the function-call tree in trap processing are
  affected, but the behavior of `return' directly called from the trap
  argument is unspecified.

However, in this case, the same question for the interpretation (B)
also applies to the interpretation (C):

2020-04-19 13:32 Koichi Murase <address@hidden>:
> > - If the literal interpretation (B) is correct, what is the use case
> >   of this behavior, or what is the rationale for this behavior?

Currently, I do not see any rationale for the behavior (B) or (C).
Does anyone know something which explains the necessity of the
behavior (B) or (C)?

It seems to me that (A) is the natural behavior because it is more
consistent with the following description in `trap' section.  I can
imagine that the special case for the `return' exit status is added to
make it more consistent with this section.

https://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_28_03
> [XCU 2.14 Special Built-In Utilities - trap - DESCRIPTION/paragraph 2]
>
> [...] The value of "$?" after the trap action completes shall be the value
> it had before trap was invoked.

Maybe I am wrong, but I cannot stop suspecting that this is a wording
problem that the original intension is (A), but it just reads like (B)
or (C) due to not enough description in the standard.

------------------------------------------------------------------------

2020-04-19 20:51 Robert Elz <kre@munnari.oz.au>:
> Before I make any other comments, I should point out that quite a
> bit of what is in the shell standard (and the rest of POSIX, and for
> that matter, many other standards) isn't there because there's a
> good reason for it, but just because the original shells implemented
> it that way, often for expediency purposes (the original Bourne
> shell had to run in the 64KB address space (code, data, and stack)
> of a PDP-11).

Thank you for pointing out this.  After reading your comment, I was
interested in the behavior of the Bourne shell, so I have tried with
the Heirloom Bourne shell (which is a port of the SVR4 Bourne shell
according to its page) in AUR.  Actually, the Heirloom Bourne shell
turns out to follow the interpretation (A) [ although it might be
possible that the behavior is changed by the port ].

2020-04-19 20:51 Robert Elz <kre@munnari.oz.au>:
> Note that another intrepretation that you didn't list is that this
> magic return applies to return in functions called directly from the
> trap action string (which are more likely to be functions written
> expressly with the intent of being called this way) but not to
> functions called indirectly.

Thank you for suggesting another possibility.  Let me call the above
one the interpretation (D).  I have updated the script to distinguish
(D) from (B):

  setexit() { return "$1"; }
  invoke() { kill -USR1 $$; return 222; }

  trap 'setexit 111; return' USR1
  invoke
  case $? in
  0)   echo 'In trap argument: last command preceding the trap action' ;;
  111) echo 'In trap argument: last command in the trap action' ;;
  222) echo 'In trap argument: (failed to exit the function)' ;;
  *)   echo 'In trap argument: (unexpected)' ;;
  esac

  stat=99
  handler() { setexit 111; return; }
  trap 'handler; stat=$?; return' USR1
  invoke
  case $stat in
  0)   echo 'In direct function call: last command preceding the trap action' ;;
  111) echo 'In direct function call: last command in the trap action' ;;
  *)   echo 'In direct function call: (unexpected)' ;;
  esac

  stat=99
  utility2() { setexit 111; return; }
  handler2() { utility2; stat=$?; }
  trap 'handler2' USR1
  invoke
  case $stat in
  0)   echo 'In indirect function call: last command preceding the trap action' ;;
  111) echo 'In indirect function call: last command in the trap action' ;;
  *)   echo 'In indirect function call: (unexpected)' ;;
  esac

But there was actually no implementation that follows (D) among the
shells that I tested so far.  Here is the summary:

  (A) `zsh', `dash', `busybox', `heirloom-sh'
  (B) `bash-4.4', `mksh', `ksh'
  (C) `yash'
  (D) none
  Not Implemented: `bash-4.3', `posh'

--
Koichi

------------------------------------------------------------------------


2020-04-19 21:55 Harald van Dijk <ag@gigawatt.nl>:
> My reading was that interpretation B must be what is intended, which
> is why I had modified my shell, a fork of dash, to change dash's A
> behaviour to B in late 2018.

Thank you.  Is your shell this https://github.com/hvdijk/gwsh ?  I
tried gwsh-0.5.9.1.  Here is the updated list:

  (A) `zsh', `dash', `busybox', `heirloom-sh'
  (B) `bash-4.4', `mksh', `ksh', `gwsh'
  (C) `yash'
  (D) none
  Not Implemented: `bash-4.3', `posh'

> My reasoning for that is that the description of the return
> commanhd ("When return is executed in a trap action, the last
> command is considered to be the command that executed immediately
> preceding the trap action.") is identical to that of the exit
> command ("When exit is executed in a trap action, the last command
> is considered to be the command that executed immediately preceding
> the trap action.")

Thank you.  This is a good point. Maybe this is the origin of the
current wording.

> and for the exit command, almost all shells, including dash, are in
> agreement that it applies even when the exit command is invoked
> indirectly. [...]

It is reasonable that indirect `exit' in function calls in trap
handlers are affected because it actually brings the completion of
trap action which is more consistent with the following description of
`trap'.  While, the trap action will not be completed by indirect
`return', so it is not surprising that the behavior can be different
between `exit' and `return'.

>>>> [XCU 2.14 Special Built-In Utilities - trap - DESCRIPTION/paragraph 2]
>>>>
>>>> [...] The value of "$?" after the trap action completes shall be
>>>> the value it had before trap was invoked.

--
Koichi

------------------------------------------------------------------------

% I think there are two aspects of the standard:
% 
% - One is that the standard defines normative behavior for the
%   implementations.  In this sense, first the standard can be changed
%   and then the shells follow it.  Waiting for the implementations to
%   change their behavior to spontaneously form agreement before
%   defining it in the standard is the other way round.  If we can get
%   agreement without the standard, we do not need the standard.
%   However, even if the standard defines some behavior, the shells
%   might not necessarily follow the standard (particularly in the case
%   that the defined behavior is historical and unreasonable).  In this
%   case, users cannot reliably use the behavior defined in POSIX.
% 
% - Here we come to notice the other practical aspect of the standard:
%   It effectively defines a maximal common set of features of various
%   shells which users can rely on.  However, if we strictly follow this
%   policy, we can only define a very limited set of behaviors and many
%   important behaviors becomes unspecified, which is not sufficient for
%   real uses.  So we have to give up to some extent. In fact, POSIX
%   shell include several features that is not in the original Bourne
%   shell, such as `$()' and `$(())' [ I also noticed yesterday that `('
%   in `case x in (pat) ;; esac' cannot be specified in the Bourne
%   shell.  We have to always omit it. ].

2020-04-20 1:42 Robert Elz <kre@munnari.oz.au>:
> Probably not, bosh is derived from that shell (more or less) and it is
> also A
>
> [...]
>
> So are the FreeBSD and NetBSD shells (which is not surprising, as like
> dash, they're descendants of ash).
>
> You can also add zsh to A:

Thank you for the information.  I have also tested ksh93, pdksh and
oksh (OpenBSD KornShell) on FreeBSD.  `ksh93' is (B), and `pdksh' and
`oksh' do not implement the special treatment in trap handlers.  Here
is the current list:

  (A) zsh (zsh-5.7.1, zsh-5.6.2)
    ash variants (dash-0.5.10.2, busybox-1.28.3, FreeBSD sh, NetBSD sh),
    Bourne sh variants (heirloom-sh-050706-4, bosh-2020/04/18)
  (B) bash-4.4, gwsh,
    ksh variants (ksh-2020.0.0, ksh93.u_1, mksh-R57, mksh-R56)
  (C) yash-2.49
  (D) none
  (Not Implemented) bash-4.3, pdksh-5.2.14.2, oksh-6.6.1, posh-0.13.2

I think now it is rather clear that the current wording of POSIX is
somehow ambiguous and there can be different interpretations.  In
fact, there is a split, (A) vs (B), in shell implementations.

>> 2020-04-19 23:00 Harald van Dijk <ag@gigawatt.nl>:
>>> It does still mean that anyone writing a function needs to beware that
>>> exit and exit $? do not have the same effect, if there is any
>>> possibility that the function will be invoked from a trap action. I
>>> suspect most people writing functions will not be aware of that.

Yes, that is the problem.  Actually, the original problem is that I
just want to perform `eval "$PROMPT_COMMAND"` in a trap action in Bash
script where `$PROMPT_COMMAND' is provided by users.  If everythinig
is under the control, I can just always write `return $?', but the
commands in `$PROMPT_COMMAND' are specified by users who are unlikely
to care about this problem.  This specific case is just my personal
one, but I think the behavior (B) can possibly cause similar problems
in other shell scripts in general.


>> 2020-04-19 20:51 Robert Elz <kre@munnari.oz.au>:
>>> [...]
>>>
>>> The end result, unless we can get agreement that some
>>> implementations are buggy, and will be fixed (which given the
>>> split seems an unlikely outcome) is likely to simply be that all
>>> of this simply becomes unspecified (or perhaps we could hope,
>>> implementation defined) which will mean even more cases where it
>>> becomes more difficult to write portable reliable code.
>>>
>>> kre

>> 2020-04-19 23:00 Harald van Dijk <ag@gigawatt.nl>:
>>> True, and if the intent is that exit and return behave differently
>>> and the standard is updated to clearly require that, I have no
>>> problem changing the shell back to the prior behaviour.

According to these comments, it seems like a deadlock. The standard
will not change until shells change their behavior to match with each
other, and shells will not change their behavior until the standard is
clarified.  Actually I can understand both sides, but I think we can
find a point of compromise.

There are already different implementations so it is already difficult
to write portable and reliable code.  Even some shells such as
`pdksh', `oksh' and `posh' does not implement the special behavior of
`return' in trap actions at all, so the standard does not describe the
current situation properly.  Thus I think the side effect of making it
unspecified is limited.  Maybe we can first let it be unspecified and
then wait to see if the shells will switch whether behavior from the
literal reading (B) to more sensible interpretation (A) or not.

- It might be difficult to change the behavior (B) of `ksh' and `mksh'
  because its behavior is unchanged at least since 1993.

- While, `bash' implemented the behavior (B) in bash-4.4 which is
  relatively recently in its long history, so maybe we can hope for a
  change.

- Harald: The remaining shell with (B) in the list is `gwsh'.  For
  example, if the standard changes its description to `unspecified'
  (instead of clearly requiring (A) or other interpretation), do you
  think you have a chance to change the behavior back?

- I think `yash' with the interpretation (C) will follow the standard
  anytime if the standard clarifies the intended behavior because
  `yash' aims to strictly support POSIX.

------------------------------------------------------------------------

追加情報: Solaris 11 の /usr/sunos/bin/sh は Bourne sh らしい。
これで試してみると解釈 A である。然し、Bourne sh の version が何かは謎。
取り敢えず "SunOS 5.11 11.3 /usr/sunos/bin/sh" としておく。

/usr/sunos/bin/ksh は ksh88 らしい。

* version の確認の仕方が分からないが、
  どうやら ksh88 には $ERRNO があり、また ${.sh.version} には対応していないらしい。
  そして /usr/sunos/bin/ksh はそれを満たしている。或いは、
  strings ksh | grep Version とやって確認するらしい。試しに実行してみると

    @(#)Version M-11/16/88i

  と表示されるが見方が良く分からない。
  要するに 1988-11-16 の version という事か。

* これで試すと先ず kill -USR $$ すると終了してしまう。
  仕方がないので無限ループを回して外からのシグナルで trap を発動する事にした。
  trap argument で return するとそのままシェルが終了してしまう。
  そして関数の中で return すると preceding $? を使うらしい。

  そもそも $? が全く変わらない可能性もある? と思ったが、
  関数内で setexit するとちゃんと $? は更新されている。
  という訳で ksh88 の振る舞いは (C) である。


* bash-preexec.sh でやはり問題に為る気がする。
  https://github.com/rcaloras/bash-preexec/blob/master/bash-preexec.sh#L232
  ここでユーザが登録した関数の戻り値を確認している。
  ユーザは return が直前のコマンドの終了ステータスを返すと考えるだろう。


  暫くして何も動きがなければまた Bash に掛け合って見る事にする。

  a 現在の振る舞いを変更する事を提案する。

    * 長らく対応して来なかった。現在の振る舞いは割合最近の物である。

      そして、変更の発端になったのは
      (曖昧とされた POSIX) の記述による物であって、
      実際の使用例から動機づけられた訳ではない。

    * 寧ろ、今回のように問題が起きている。

    * bash-prexec.sh でもユーザが return を使うと
      DEBUG ハンドラの中で変な事が起こる。
      preexec_function_ret_value の値が変な事になる。
      然し、preexec_function_ret_value は bash-preexec 自身では使われていない。
      実際にこの変数を使うスクリプトが存在するのかは謎。
      iterm2_shell_integration も使ってはいない。
      Google で検索すると preexec_function_ret_value を
      含んでいるのはこの二つだけである。

    * 現在の振る舞いに依存しているコードがあるとは思えない
      (使いみちが分からない。結局理由付けも為されなかった)。

  b -o posix の時にのみ B の振る舞いにする。
    これは元々の ChangeLog の中に残されていた言葉に基づく。

  c 或いはこの振る舞いを制御する shopt を作成する?
    この細かい振る舞いだけに特化した shopt を作るのも
    変だという気がするので、compat50 か compat44 に含めても良い。
