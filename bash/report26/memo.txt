
2021-06-27

変数に改行が含まれている時に変数展開が遅くなる問題について

* test1.sh で再現させる。

  調べると ${xx...} の全ての形式について起こる訳ではなくて、${v,} と
  ${v^} で起こる様である。${v:o:l} や ${v#} や ${v//A} では発生しない。
  しかし、それとは別に ${v//A} は O(n^2) で遅くなる様である。
  本来これらの処理は線形時間であるべきなのではないか。

* 取り敢えず uppercase/lowercase について対処を考える。

  先ずは対応する処理が何処にあるか探す必要がある。

  ${v@L} ${v@U} に関しては subst.c:7912..7920 に於いて sh_modcase とい
  う関数を呼び出している。${v^} に関しては subst.c:8812 で呼び出している。
  sh_modcase は第二引数がパターンで第三引数が操作の種類である。

  取り敢えず sh_modcase という関数の実装が怪しいのだという事は分かった。
  というか globpat が絡んでくると O(N^2) でスケールするという事なのだろうか。
  だとすると単純に変数展開を修正するという訳には行かないのではないか。

  うーん。先ず一番最初に気になるのは cval の中で毎回 strlen を実行して
  いるという事。然しこれは改行があるかどうかと関係ない。と思ったが何故
  か可也改善した。うーん。ループの回数が変わるという事だろうか。例えば
  ASCII の範囲の文字はまとめて処理している等。。

  うーん。実際に呼び出し回数を確認してみるとちゃんと文字数だけ呼び出さ
  れている。という事は strlen 自体に何らかの最適化が施されているという
  事だろうか。或いは、うーん。改行がない場合には CPU か何かが結果をキャッ
  シュしている可能性? それも変な気がする。うーん。まあ、問題は明らかな
  のでこのまま PATCH として提出してしまって良い気がする。


* ${v//A} についても同様の問題があるという事だろうか。

  subst.c:8625 から呼び出されている pat_subst という関数で処理が行われ
  ている。pos_params_pat_subst という関数でも処理が行われている。

  うーん。一文字も一致しない場合でも O(n^2) になっているので
  match_pattern が怪しいのではないか。と思ったが本当だろうか。改めて計
  測する。→やはり再度計測しても一文字も一致しなくても超線形になってい
  る。

  うーん。この wcsmatch が超線形という事だろうか。調べると恐らく *A*
  で一致を試みている。この *A* による一致自体に時間がかかっているとい
  う事だろうか。うーん。引っかからないと思ったら strmatch　の方が呼ば
  れていた。然し、それでもこの strmatch の中で時間を消費しているという
  訳ではない様だ。寧ろ、その後に続く何らかの処理で時間を消費している。

  うーん。問題は pat_subst の外で発生している様に見える。と思ったら違っ
  た。内部だった。最後の RESIZE_MALLOCED_BUFFER (ret, rptr,
  STRLEN(str) + 1, rsize, 64); を呼び出している所で滅茶苦茶時間がかかっ
  ている。これは一体どういう事だろうか。

  分かった。マクロの中で何度も同じ式を評価しているのが原因であった。
