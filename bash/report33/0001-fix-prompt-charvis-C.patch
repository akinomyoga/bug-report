From 417e55e7c0e1f7b43099c03ef0bb247d8c592812 Mon Sep 17 00:00:00 2001
From: Koichi Murase <myoga.murase@gmail.com>
Date: Tue, 15 Mar 2022 06:43:30 +0900
Subject: [PATCH 1/3] fix backslash quoting of invisible character ^\ (separate
 sh_strvis)

---
 externs.h        |  2 +-
 lib/sh/shquote.c | 23 +++++------------------
 parse.y          | 32 ++++++++++++++++++--------------
 3 files changed, 24 insertions(+), 33 deletions(-)

diff --git a/externs.h b/externs.h
index 86557501..72981a7c 100644
--- a/externs.h
+++ b/externs.h
@@ -342,7 +342,7 @@ extern char *sh_double_quote PARAMS((const char *));
 extern char *sh_mkdoublequoted PARAMS((const char *, int, int));
 extern char *sh_un_double_quote PARAMS((char *));
 extern char *sh_backslash_quote PARAMS((char *, const char *, int));
-extern char *sh_backslash_quote_for_double_quotes PARAMS((char *, int));
+extern char *sh_backslash_quote_for_double_quotes PARAMS((char *));
 extern char *sh_quote_reusable PARAMS((char *, int));
 extern int sh_contains_shell_metas PARAMS((const char *));
 extern int sh_contains_quotes PARAMS((const char *));
diff --git a/lib/sh/shquote.c b/lib/sh/shquote.c
index 622fcbb0..e495c2ac 100644
--- a/lib/sh/shquote.c
+++ b/lib/sh/shquote.c
@@ -39,8 +39,6 @@
 extern char *ansic_quote PARAMS((char *, int, int *));
 extern int ansic_shouldquote PARAMS((const char *));
 
-extern int sh_charvis PARAMS((const char *, size_t *, size_t, char *, size_t *));
-
 /* Default set of characters that should be backslash-quoted in strings */
 static const char bstab[256] =
   {
@@ -315,26 +313,22 @@ sh_backslash_quote (string, table, flags)
 
 #if defined (PROMPT_STRING_DECODE) || defined (TRANSLATABLE_STRINGS)
 /* Quote characters that get special treatment when in double quotes in STRING
-   using backslashes. If FLAGS == 1, also make `unsafe' characters visible by
-   translating them to a standard ^X/M-X representation by calling sh_charvis,
-   which handles multibyte characters as well.
-   Return a new string. */
+   using backslashes.  Return a new string. */
 char *
-sh_backslash_quote_for_double_quotes (string, flags)
+sh_backslash_quote_for_double_quotes (string)
      char *string;
-     int flags;
 {
   unsigned char c;
   char *result, *send;
   size_t slen, sind, rind;
   int mb_cur_max;
   DECLARE_MBSTATE;
- 
+
   slen = strlen (string);
   send = string + slen;
   mb_cur_max = MB_CUR_MAX;
-  /* Max is 4*string length (backslash + three-character visible representation) */
-  result = (char *)xmalloc (4 * slen + 1);
+  /* Max is 2*string length (backslash) */
+  result = (char *)xmalloc (2 * slen + 1);
 
   for (rind = sind = 0; c = string[sind]; sind++)
     {
@@ -343,13 +337,6 @@ sh_backslash_quote_for_double_quotes (string, flags)
       if ((sh_syntaxtab[c] & CBSDQUOTE) && c != '\n')
 	result[rind++] = '\\';
 
-      if (flags & 1)
-	{
-	  sh_charvis (string, &sind, slen, result, &rind);
-	  sind--;		/* sh_charvis consumes an extra character */
-	  continue;
-	}
-
       /* I should probably use the CSPECL flag for these in sh_syntaxtab[] */
       else if (c == CTLESC || c == CTLNUL)
 	result[rind++] = CTLESC;		/* could be '\\'? */
diff --git a/parse.y b/parse.y
index 777188c0..18355424 100644
--- a/parse.y
+++ b/parse.y
@@ -3867,7 +3867,7 @@ parse_matched_pair (qc, open, close, lenp, flags)
 			nestret = sh_single_quote (ttrans);
 		      else
 			/* single quotes aren't special, use backslash instead */
-			nestret = sh_backslash_quote_for_double_quotes (ttrans, 0);
+			nestret = sh_backslash_quote_for_double_quotes (ttrans);
 		    }
 		  else
 		    nestret = sh_mkdoublequoted (ttrans, ttranslen, 0);
@@ -5726,7 +5726,7 @@ decode_prompt_string (string)
 		/* Make sure that expand_prompt_string is called with a
 		   second argument of Q_DOUBLE_QUOTES if we use this
 		   function here. */
-		temp = sh_backslash_quote_for_double_quotes (timebuf, 0);
+		temp = sh_backslash_quote_for_double_quotes (timebuf);
 	      else
 		temp = savestring (timebuf);
 	      goto add_string;
@@ -5739,12 +5739,14 @@ decode_prompt_string (string)
 	      goto add_string;
 
 	    case 's':
-	      temp = base_pathname (shell_name);
 	      /* Try to quote anything the user can set in the file system */
+	      temp = sh_strvis (base_pathname (shell_name));
 	      if (promptvars || posixly_correct)
-		temp = sh_backslash_quote_for_double_quotes (temp, 1);
-	      else
-		temp = sh_strvis (temp);
+		{
+		  t = sh_backslash_quote_for_double_quotes (temp);
+		  free (temp);
+		  temp = t;
+		}
 	      goto add_string;
 
 	    case 'v':
@@ -5812,16 +5814,18 @@ decode_prompt_string (string)
 		      strcpy (t_string, temp);
 		  }
 
-		temp = trim_pathname (t_string, PATH_MAX - 1);
+		temp = sh_strvis (trim_pathname (t_string, PATH_MAX - 1));
 		/* If we're going to be expanding the prompt string later,
 		   quote the directory name. */
 		if (promptvars || posixly_correct)
-		  /* Make sure that expand_prompt_string is called with a
-		     second argument of Q_DOUBLE_QUOTES if we use this
-		     function here. */
-		  temp = sh_backslash_quote_for_double_quotes (t_string, 1);
-		else
-		  temp = sh_strvis (t_string);
+		  {
+		    /* Make sure that expand_prompt_string is called with a
+		       second argument of Q_DOUBLE_QUOTES if we use this
+		       function here. */
+		    t = sh_backslash_quote_for_double_quotes (temp);
+		    free (temp);
+		    temp = t;
+		  }
 
 		goto add_string;
 	      }
@@ -5841,7 +5845,7 @@ decode_prompt_string (string)
 		/* Make sure that expand_prompt_string is called with a
 		   second argument of Q_DOUBLE_QUOTES if we use this
 		   function here. */
-		temp = sh_backslash_quote_for_double_quotes (t_host, 0);
+		temp = sh_backslash_quote_for_double_quotes (t_host);
 	      else
 		temp = savestring (t_host);
 	      free (t_host);
-- 
2.35.1

