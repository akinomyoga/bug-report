
Thank you for your consideration and for implementing it.  I have
tried the latest devel branch and played with it.  I now really like
its behavior.  Thank you very much for taking it into consideration.

> I generally make new functionality that's controlled by a separate option
> off by default in releases. I'll do the same here. It's on now so we can
> evaluate its effects. It's hard to get enough people to test alpha and
> beta releases, so who knows what good that will do.

I see, I have not noticed it.  Thank you for your explanation and
sorry for the noise.

> It probably won't be in bash-5.2-alpha, since I already froze and tested
> that, but the behavior will be different in the next devel branch push
> after that.

Does that meen it will be in bash-5.2-beta or in besh-5.3?  I am
interested in what would be the behavior of the release version of
bash-5.2, which would affect how I will modify my script.

> I still like the simpler explanation: if bash-5.1 expanded `string' to
> something that contained an unescaped `&', replace it. If it expanded to
> something that contained a literal '\&' you'll get a `&'. Backslash-escaped
> backslashes produce a single literal backslash. But allowing double quotes
> to inhibit the replacement is probably better for backwards compatibility,
> even with patsub_replacement off by default.

Is this an explanation that will be put in ChangeLog or in Bash
Reference Manual?  I have checked how the quoting of anchor
characters, # and %, in ${var/#prefix} and ${var/%suffix} is explained
in Bash Reference Manual but could not find the mention about the
quoting.  For the pattern matching operators, I found an explanation:

> From https://www.gnu.org/software/bash/manual/html_node/Pattern-Matching.html:
>
> [...] The special pattern characters must be quoted if they are to
> be matched literally.

but I feel the detailed behavior is actually not so clear from this
explanation.

$ value='(K&R)' var=ABCDE
$ echo ${var//C/$value}
AB(KCR)DE
$ echo ${var//C/"$value"}
AB(K&R)DE
$ echo ${var//C/"$value"$value}
AB(K&R)(KCR)DE
$ echo ${var//C/\&}
AB&DE
$ echo ${var//C/&}
ABCDE
$ echo ${var//C/\\&}
AB\CDE
$ echo ${var//C/\\\&}
AB\&DE
$ echo ${var//C/\\}
AB\DE
$ echo ${var//C/\\\\}
AB\\DE
$ echo ${var//C/\\\\\\}
AB\\\DE
$ echo ${var//C/\\\\\\\\}
AB\\\\DE
$ echo ${var//C/\\\\\\\\&}
AB\\\\CDE
$ echo ${var//C/\\\\\\\\\&}
AB\\\\&DE
$ echo ${var//C/<&>}
AB<C>DE
$ echo ${var//C/'&'}
AB&DE
$ echo ${var//C/\'&\'}
AB'C'DE
$ echo ${var//C/"&"}
AB&DE
$ echo ${var//C/"\&"}
AB\&DE
$ echo ${var//C/""&}
ABCDE

==============================================================================

> --- a/CHANGES
> +++ b/CHANGES
> @@ -1,3 +1,326 @@
> +This document details the changes between this version, bash-5.2-alpha, and
> +the previous version, bash-5.1-release.
>
> [...]
>
> +x. New shell option: patsub_replacement. When enabled, a `&' in the replacement
> +   string of the pattern substitution expansion is replaced by the portion of
> +   the string that matched the pattern. Backslash will escape the `&' and
> +   insert a literal `&'.
>
> [...]

I haven't received replies to my previous reply, but let me write a
related discussion again. The current behavior is as follows:

$ bash-dev --norc
$ shopt | grep patsub
patsub_replacement      on
$ var=ABCDE value='(K&R)'
$ echo "${var//C/$value}"
AB(KCR)DE
$ echo "${var//C/"$value"}"     # (My suggestion of "quoting &")
AB(KCR)DE     # (the current patsub_replacement isn't designed to work for this)
$ echo "${var//C/(K\\&R)}"
AB(K&R)DE
$ echo "${var//C/\\\\\\\\}"
AB\\\\DE
$ echo "${var//C/\\\\\\\\&}"
AB\\CDE

Today I tried to modify my script so that it works with `shopt -s
patsub_replacement', and now I become more skeptical about making
patsub_replacement default and also about its current design.

I needed to modify more places than I initially expected, and also it
is not simple to simply perform the replacement that contains
arbitrary strings. Then, I checked other existing Bash programs and
found that most of the large Bash programs/frameworks are affected,
which include "bashdb", "bash-completion", "bash-it",
"bash-oo-framework", "neofetch", and "bashtop" (plus mine, "ble.sh").
The programs that seemed to be fine among the ones I have checked were
only "oh-my-bash", "romkatv/gitstatus" and "git-prompt.bash". So I
feel it is better to make patsub_replacement off by default. I attach
"affected.txt", the list of lines from these programs that can be
broken by "patsub_replacement" depending on the user inputs,
configurations and the system status:

Also, it is not simple to correctly write the codes so that it works
for both sides of patsub_replacement on/off. If it was a standalone
Bash program, we can just set `shopt -u patsub_replacement' at the
beginning of the script file, but debuggers (bashdb), shell
configurations (bash-completion, bash-it, ble.sh, etc.) and shell
libraries (shell libraries, ...) cannot assume one specific side of
the settings of `patsub_replacement' because that option is under the
control of the main program or the user of the interactive shell. I
have thought about how we can correctly write, e.g., «
result=${result// /$string} » as simply as possible (see the attached
"workaround.sh"), but I still feel they are all too non-trivial to
replace the simple « result=${result// /$string} ». I don't think
everyone can write it correctly.

Sorry, but I'd like to still push treating the quoted replacement (as
$string in « result=${result// /$string} ») literally just like the
glob operators in ${var//"$pat"} or ${var#"$pat"} (as recently
explained in e.g.
https://lists.gnu.org/archive/html/help-bash/2022-01/msg00022.html).
In Chet's previous reply, it is explained that

> > > * It is consistent with the treatment of the glob special characters
> > >   and anchors # and % in $pat of ${var/$pat}.
> >
> > Yeah, doing that was probably a mistake, but we have to live with it now.
> > Those are really part of the pattern operator itself, not properties of
> > the pattern. But nevertheless.

but I don't feel it is a mistake but rather natural than introducing
an extra level of unescaping/unquoting. It might be just because I got
used to it, but

> However, if I understand it correctly, similar treatment is
> already standardized in POSIX for ``quoting characters within the
> braces'' (as ${var#"$xxx"} and ${var%"$xxx"}):
>
> > quoted from POSIX XCU 2.6.2
> > https://pubs.opengroup.org/onlinepubs/9699919799.2018edition/utilities/V3_chap02.html#tag_18_06_02
> > [...]

which means most shell implementations agreed with its behavior for
glob operators in ${var#pat} and ${var%pat}.

==============================================================================

Thank you for the reply and sorry for my late reply.  I am busy now.

> > ----------------------------------------------------------------------
> > Suggestion / Discussion
> >
> > I suggest that '&' has the meaning of the matched part only when it is
> > not quoted in the parameter-expansion context ${...} [ Note that
> > currently, '&' has the meaning of the matched part when it is not
> > quoted by backslash in *the expanded result* ].  I expect the
> > following interpretations with this suggestion:
>
> The quoting outside the ${...} doesn't affect whether REP is quoted. This
> is consistent with how POSIX specifies the pattern removal expansions, and
> how bash has worked since bash-4.3.

I agree that the quoting outside ${...} (I mean something like «
"${...}" ») should not affect the treatment of PAT or REP in
${var/PAT/REP}.  In the original email, I intended the quoting
*inside* the ${...} such as « ${var/PAT/"&"} » or « ${var/PAT/\&} ».

> So both of these, for instance, will expand to `&' *because of how bash
> already works*, regardless of whether or not we attach meaning to `&' in
> the replacement string.
>
> > $ echo "${var/$pat/&}"    # & represents the matched part
> > $ echo "${var/$pat/\&}"   # & is treated as a literal ampersand

Yes.  As a result, both are replaced with `&' in bash-5.1.  However,
in devel, the `&'s in both cases are further replaced with the mached
parts in the final expansion results by `strcreplace', so anyway the
current devel breaks what you say *how bash already works* after
combining quote removal and the new strcreplce.  I would not request
to change *how bash already works* but would like to request
preserving *how bash already works* that is observable to users in a
bit more situations including « ${var/$pat/\&} », « ${var/$pat/"$rep"}
», etc. in a consistent way with quoting PAT in ${var/PAT}.

> This next one will expand to `\&' again due to existing behavior,
> regardless of what we do with it, due to how quote removal works.
> And so on.
>
> > $ echo "${var/$pat/\\&}"  # A literal backslash plus the matched part

I know why they behave like that in the current implementation in
devel, but knowing that, I have proposed a change on the design.

> > $ echo "${var/$pat/'\'&}" # A literal backslash plus the matched part
> > $ rep='A&B'
> > $ echo "${var/$pat/$rep}"   # 'A' plus the mached part plus 'B'
> > $ echo "${var/$pat/"$rep"}" # Literal 'A&B'
>
> Rather than dance around behind the scenes trying to invisibly quote &,
> but only in certain contexts where it would not otherwise be escaped by
> double quoting, I would be more in favor of adding an option to enable the
> feature and allowing the normal rules of double quoted strings to apply.

I thought the proposed quoting rule is well-defined as the similar
treatment is already implemented for glob characters in PAT of
${var/PAT}.  This kind of passing the quoting state to the next
process is also used in `=~' operator of the conditional command, such
as « [[ str =~ $regex ]] » vs « [[ str =~ "$literal" ]] ».

If the new behavior is introduced in the current way, which requires
extra quoting, through a new option, I would like to propose making
the default of the option disabling the new feature.

> > Here are the rationale:
> >
> > * It is consistent with the treatment of the glob special characters
> >   and anchors # and % in $pat of ${var/$pat}.
>
> Yeah, doing that was probably a mistake, but we have to live with it now.
> Those are really part of the pattern operator itself, not properties of
> the pattern. But nevertheless.

Oh, I have not thought of the possibility that the treatment of
quoting removal of ${var/$pat} might be considered a mistake.
However, if I understand it correctly, the similar treatment is
already standardized in POSIX for ``quoting characters within the
braces'' (as ${var#"$xxx"} and ${var%"$xxx"}):

> quoted from POSIX XCU 2.6.2
> https://pubs.opengroup.org/onlinepubs/9699919799.2018edition/utilities/V3_chap02.html#tag_18_06_02
>
> The following four varieties of parameter expansion provide for
> substring processing. [...] Enclosing the full parameter expansion
> string in double-quotes shall not cause the following four varieties
> of pattern characters to be quoted, whereas quoting characters
> within the braces shall have this effect. [...]
>
> ${parameter%[word]} ...
> ${parameter%%[word]} ...
> ${parameter#[word]} ...
> ${parameter##[word]} ...
>
> Examples
>
> [...]
>
> The double-quoting of patterns is different depending on where the
> double-quotes are placed:
>
> "${x#*}"
>   The <asterisk> is a pattern character.
>
> ${x#"*"}
>   The literal <asterisk> is quoted and not special.

In the final example, the normal expansion result of `"*"' is `*' but
this should not be directly passed to the pattern matching engine to
achive the behavior POSIX defines.

> > * One can intuitively quote & to make it a literal ampersand.  The
> >   distinction of the special & in ${var/$pat/&} and the literal
> >   ampersand in ${var/$pat/\&} is more intuitive than ${var/$pat/&} vs
> >   ${var/$pat/\\&}.
>
> Not if you take into account the word expansions the replacement
> string undergoes. For example, if you use ${var/$pat/\&} in
> bash-5.1, you're going to get a `&' in the output, not `\&'.  Now
> you invite the questions of why bash expands things differently
> whether or not there is a `&' in the replacement string, and since
> the non-special bash-5.1 expanded that to `&', why should bash-5.2
> not treat it as a replacement?
>
> I guess the question is why not let the normal shell word expansion
> rules apply, and work with the result.

I think that that (i.e., letting the normal expansion rules apply and
working with the result) is what the current devel does.  But I am
proposing a different behavior that is similar to the treatment of PAT
in ${var/PAT} where *the normal expansion rules plus expansion of `&'
is performed at once* in the observable behavior (but of course the
real implementation can be different as in the case of PAT in
${var/PAT} that the expansion and the pattern matching is actually
processed in separate steps but by introducing internal quoting in the
expansion step).

--
Koichi

==============================================================================

Subject: devel: Questions about quoting in the new replacement ${var/pat/&}

I have questions on the new feature ${var/pat/&} in the devel branch.

> commit f188aa6a013e89d421e39354086eed513652b492 (upstream/devel)
> Author: Chet Ramey <chet.ramey@case.edu>
> Date:   Mon Oct 4 15:30:21 2021 -0400
>
>     enable support for using `&' in the pattern substitution replacement string
>
> Any unquoted instances of & in STRING are replaced with the matching
> portion of PATTERN.  Backslash is used to quote & in STRING; the
> backslash is removed in order to permit a literal & in the
> replacement string.  Users should take care if STRING is
> double-quoted to avoid unwanted interactions between the backslash
> and double-quoting.  Pattern substitution performs the check for &
> after expanding STRING; shell programmers should quote backslashes
> intended to escape the & and inhibit replacement so they survive any
> quote removal performed by the expansion of STRING.

I would very much like this change introduced in the latest commit
f188aa6a in devel as it would enable many more string manipulations
with a simple construct, but I feel the current treatment of quoting
has problems:

1. There is no way to specify an arbitrary string in replacement in a
  way that is compatible with both bash 5.1 and 5.2.

2. There is no way to insert a backslash before the matched part
  (which I'd think would be one of the typical usages of &).

I below describe the details of each, followed by my suggestion or
discussion on an alternative design.

----------------------------------------------------------------------
1. How to specify an arbitrary string in replacement copatibly with
both bash 5.1 and 5.2?

Currently any & in the replacement is replaced by the matched part
regardless of whether & is quoted in the parameter-expansion context
or not.  Even the result of the parameter expansions and other
substitutions are subject to the special treatment of &, which makes
it non-trivial to specify an arbitrary string to the replacement
${var/pat/rep}.

  $ str='X&Y&Z' pat='Y' rep='A&B'
  $ echo ${str/$pat/XXXX}
  X&A&B&Z

where XXXX is some string that represents the literal "$rep" (i.e.,
'A&B').  A naive quoting of "$rep" does not work:

  $ echo "1:${str/$pat/"$rep"}"
  1:X&AYB&Z

I would have expected it to work because $pat will lose special
meaning and be treated literally when it is quoted as "$pat".  For
example, the glob patterns *?[ etc. and anchors # and % in $pat will
lose its special meaning when it is quoted:

  $ v='A' p='?'; echo "${v/$p/B}"; echo "${v/"$p"/B}"
  B
  A
  $ v='A' p='#'; echo "${v/$p/B}"; echo "${v/"$p"/B}"
  BA
  A
  $ v='A' p='%'; echo "${v/$p/B}"; echo "${v/"$p"/B}"
  AB
  A

Of course, if $rep is not quoted, & in $rep is replaced by the matched
part.

  $ echo "2:${str/$pat/$rep}"
  2:X&AYB&Z

* To properly specify an arbitrary string in the replacement, one
  needs to replace all the characters.

  $ echo "${str/$pat/${rep//&/\\\\&}}"

* When the replacement is not stored in a variable, one needs to
  create a variable for the replacement, i.e.,

  $ echo "${str/$pat/$(something)}"

  in Bash 5.1 needs to be converted to

  $ tmp=$(something)
  $ echo "${str/$pat/${tmp//&/\\\\&}}"

  in Bash 5.2.

* Also, there is no way of writing it so that it works in both Bash
  5.1 and 5.2.  To make it work, one needs to switch the code
  depending on the bash version as:

  if ((BASH_VERSINFO[0]*10000+BASH_VERSINFO[1]*100>=50200)); then
    echo "${str/$pat/${rep//&/\\\\&}}"
  else
    echo "${str/$pat/$rep}"
  fi

  [ Note: this does not work for the devel branch because the devel
  branch still has the version 5.1. ]

----------------------------------------------------------------------
2. How to insert a literal backslash before the matched part?

Another problem is that one cannot put a literal backslash just before
& without affecting the meaning of &.  Currently if there is any
backslash before &, & will lose the special meaning and the two
characters '\&' become '&' after the replacement.

One of typical usages of & in the replacement would be string
escaping, i.e., quoting special characters in a string so that they do
not have special meaning and are treated literally.  For example, let
us consider escaping a string as a glob pattern as in the following
case:

  $ value='a*b*c' globchars='\*?[('
  $ escaped=${value//["$globchars"]/XXXX}
  $ echo "$escaped"
  a\*b\*c

where "XXXX" is some string that represents a literal '\' plus &.  I
naively expect « XXXX = '\'& » would work, which doesn't work
actually:

  $ echo "${value//["$globchars"]/'\'&}"
  1:a&b&c

All the other attempts fail:

  $ echo "2a:${value//["$globchars"]/&}"
  2a:a*b*c
  $ echo "2b:${value//["$globchars"]/\&}"
  2b:a*b*c
  $ echo "2c:${value//["$globchars"]/\\&}"
  2c:a&b&c
  $ echo "2d:${value//["$globchars"]/\\\&}"
  2d:a&b&c
  $ echo "2e:${value//["$globchars"]/\\\\&}"
  2e:a\&b\&c
  $ echo "2f:${value//["$globchars"]/\\\\\&}"
  2f:a\&b\&c
  $ echo "2g:${value//["$globchars"]/\\\\\\&}"
  2g:a\\&b\\&c

  $ backslash='\'
  $ echo "3a:${value//["$globchars"]/$backslash&}"
  3a:a&b&c
  $ echo "3b:${value//["$globchars"]/"$backslash"&}"
  3b:a&b&c

Is there any way to put a backslash just before the matched part in
replacements?

----------------------------------------------------------------------
Suggestion / Discussion

I suggest that '&' has the meaning of the matched part only when it is
not quoted in the parameter-expansion context ${...} [ Note that
currently, '&' has the meaning of the matched part when it is not
quoted by backslash in *the expanded result* ].  I expect the
following interpretations with this suggestion:

$ echo "${var/$pat/&}"    # & represents the matched part
$ echo "${var/$pat/\&}"   # & is treated as a literal ampersand
$ echo "${var/$pat/\\&}"  # A literal backslash plus the matched part
$ echo "${var/$pat/'\'&}" # A literal backslash plus the matched part
$ rep='A&B'
$ echo "${var/$pat/$rep}"   # 'A' plus the mached part plus 'B'
$ echo "${var/$pat/"$rep"}" # Literal 'A&B'

Here are the rationale:

* It is consistent with the treatment of the glob special characters
  and anchors # and % in $pat of ${var/$pat}.

* By specifying ${var/$pat/"$rep"} where $rep is an arbitrary string,
  one can make the code compatible with both Bash 5.1 and 5.2.

* One can intuitively quote & to make it a literal ampersand.  The
  distinction of the special & in ${var/$pat/&} and the literal
  ampersand in ${var/$pat/\&} is more intuitive than ${var/$pat/&} vs
  ${var/$pat/\\&}.

* One can insert a backslash before the matched part by intuitive ways
  ${var/$pat/'\'&} or ${var/$pat/\\&}.

What do you think?

----------------------------------------------------------------------
Bash version of devel branch?

By the way, when would the BASH_VERSINFO be updated?  The devel
version still has the Bash version 5.1.  I would like to reference the
version information to switch the implementation.  In particular,
since some incompatible changes are introduced in the devel branch
(which are supposed to be released as Bash 5.2), I need to switch the
implementation.

diff --git a/configure.ac b/configure.ac
index 4e03fb5a..a40b4d88 100644
--- a/configure.ac
+++ b/configure.ac
@@ -23,8 +23,8 @@ dnl Process this file with autoconf to produce a configure script.

-AC_REVISION([for Bash 5.1, version 5.034])dnl
+AC_REVISION([for Bash 5.2, version 5.034])dnl

-define(bashvers, 5.1)
+define(bashvers, 5.2)
 define(relstatus, maint)

 AC_INIT([bash], bashvers-relstatus, [bug-bash@gnu.org])


--
Koichi
