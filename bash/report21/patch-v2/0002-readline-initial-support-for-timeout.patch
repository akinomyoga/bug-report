From 5ee1448846654a811758118fa4cbbbd70447d25c Mon Sep 17 00:00:00 2001
From: Koichi Murase <myoga.murase@gmail.com>
Date: Fri, 12 Feb 2021 09:31:32 +0900
Subject: [PATCH 2/4] readline: initial support for timeout

---
 .gitignore                         |   6 +
 lib/readline/callback.c            |   5 +
 lib/readline/examples/Makefile     |   6 +
 lib/readline/examples/rl-timeout.c | 205 +++++++++++++++++++++++
 lib/readline/input.c               | 250 +++++++++++++++++++++++++++--
 lib/readline/readline.c            |  11 ++
 lib/readline/readline.h            |   6 +
 lib/readline/rlprivate.h           |  14 +-
 lib/readline/signals.c             |   3 +
 9 files changed, 489 insertions(+), 17 deletions(-)
 create mode 100644 lib/readline/examples/rl-timeout.c

diff --git a/.gitignore b/.gitignore
index a3f65e8b..8380cd48 100644
--- a/.gitignore
+++ b/.gitignore
@@ -42,6 +42,12 @@ lib/glob/Makefile
 lib/intl/Makefile
 lib/malloc/Makefile
 lib/readline/Makefile
+lib/readline/examples/fileman
+lib/readline/examples/rl
+lib/readline/examples/rl-callbacktest
+lib/readline/examples/rl-callbacktest2
+lib/readline/examples/rl-timeout
+lib/readline/examples/rltest
 lib/sh/Makefile
 lib/termcap/Makefile
 lib/tilde/Makefile
diff --git a/lib/readline/callback.c b/lib/readline/callback.c
index 66e8d113..268bdf38 100644
--- a/lib/readline/callback.c
+++ b/lib/readline/callback.c
@@ -147,6 +147,11 @@ rl_callback_read_char (void)
       (*rl_redisplay_function) ();
       _rl_want_redisplay = 0;
       memcpy ((void *)_rl_top_level, (void *)olevel, sizeof (procenv_t));
+      if (RL_ISSTATE (RL_STATE_TIMEOUT))
+	{
+	  RL_SETSTATE(RL_STATE_DONE);
+	  rl_done = 1;
+	}
       CALLBACK_READ_RETURN ();
     }
 
diff --git a/lib/readline/examples/Makefile b/lib/readline/examples/Makefile
index 2df22407..e54e2165 100644
--- a/lib/readline/examples/Makefile
+++ b/lib/readline/examples/Makefile
@@ -28,6 +28,12 @@ all: $(EXECUTABLES)
 
 rl: rl.o
 	$(CC) $(LDFLAGS) -o $@ rl.o -lreadline -ltermcap
+rl-callbacktest: rl-callbacktest.o
+	$(CC) $(LDFLAGS) -o $@ rl-callbacktest.o -lreadline -ltermcap
+rl-callbacktest2: rl-callbacktest2.o
+	$(CC) $(LDFLAGS) -o $@ rl-callbacktest2.o -lreadline -ltermcap
+rl-timeout: rl-timeout.o
+	$(CC) $(LDFLAGS) -o $@ rl-timeout.o -lreadline -ltermcap
 
 fileman: fileman.o
 	$(CC) $(LDFLAGS) -o $@ fileman.o -lreadline -ltermcap
diff --git a/lib/readline/examples/rl-timeout.c b/lib/readline/examples/rl-timeout.c
new file mode 100644
index 00000000..39907a76
--- /dev/null
+++ b/lib/readline/examples/rl-timeout.c
@@ -0,0 +1,205 @@
+/* Standard include files. stdio.h is required. */
+#include <stdlib.h>
+#include <unistd.h>
+#include <string.h>
+
+/* Used for select(2) */
+#include <sys/types.h>
+#include <sys/select.h>
+
+#include <errno.h>
+#include <stdio.h>
+
+/* Standard readline include files. */
+#if defined (READLINE_LIBRARY)
+#  include "readline.h"
+#  include "history.h"
+#else
+#  include <readline/readline.h>
+#  include <readline/history.h>
+#endif
+
+extern int errno;
+
+static void cb_linehandler (char *);
+
+int running;
+const char *prompt = "rltest$ ";
+
+/* **************************************************************** */
+/*								    */
+/* Example 1: readline () with rl_readline_state		    */
+/*								    */
+/* **************************************************************** */
+
+void
+rltest_timeout_readline1 ()
+{
+  const char* temp;
+
+  rl_timeout (1, 0);
+  temp = readline (prompt);
+  if (RL_ISSTATE (RL_STATE_TIMEOUT))
+    printf ("timeout\n");
+  else if (temp == NULL)
+    printf ("no input line\n");
+  else
+    printf ("input line: %s\n", temp);
+  free (temp);
+}
+
+/* **************************************************************** */
+/*								    */
+/* Example 2: readline () with rl_timeout_event_hook		    */
+/*								    */
+/* **************************************************************** */
+
+static int
+timeout_handler ()
+{
+  printf ("timeout\n");
+  return READERR;
+}
+
+void
+rltest_timeout_readline2 ()
+{
+  const char* temp;
+
+  rl_timeout (1, 0);
+  rl_timeout_event_hook = timeout_handler;
+  temp = readline (prompt);
+  if (temp == NULL)
+    printf ("no input line\n");
+  else
+    printf ("input line: %s\n", temp);
+  free (temp);
+}
+
+/* **************************************************************** */
+/*								    */
+/* Example 3: rl_callback_* () with rl_timeout_remaining	    */
+/*								    */
+/* **************************************************************** */
+
+/* Callback function called for each line when accept-line executed, EOF
+   seen, or EOF character read.  This sets a flag and returns; it could
+   also call exit(3). */
+static void
+cb_linehandler (char *line)
+{
+  /* Can use ^D (stty eof) or `exit' to exit. */
+  if (line == NULL || strcmp (line, "exit") == 0)
+    {
+      if (line == 0)
+	printf ("\n");
+      printf ("exit\n");
+      /* This function needs to be called to reset the terminal settings,
+	 and calling it from the line handler keeps one extra prompt from
+	 being displayed. */
+      rl_callback_handler_remove ();
+
+      running = 0;
+    }
+  else
+    {
+      if (*line)
+	add_history (line);
+      printf ("input line: %s\n", line);
+      free (line);
+    }
+}
+
+void
+rltest_timeout_callback1 ()
+{
+  fd_set fds;
+  int r;
+  unsigned sec, usec;
+
+  rl_timeout (1, 0);
+  rl_callback_handler_install (prompt, cb_linehandler);
+  running = 1;
+  while (running)
+    {
+      FD_ZERO (&fds);
+      FD_SET (fileno (rl_instream), &fds);
+      r = rl_timeout_remaining (&sec, &usec);
+      if (r == 1)
+	{
+	  struct timeval timeout = {sec, usec};
+	  r = select (FD_SETSIZE, &fds, NULL, NULL, &timeout);
+	}
+      if (r < 0 && errno != EINTR)
+	{
+	  perror ("rltest: select");
+	  rl_callback_handler_remove ();
+	  break;
+	}
+      else if (r == 0)
+	{
+	  printf ("rltest: timeout\n");
+	  rl_callback_handler_remove ();
+	  break;
+	}
+
+      if (FD_ISSET (fileno (rl_instream), &fds))
+	rl_callback_read_char ();
+    }
+
+  printf ("rltest: Event loop has exited\n");
+}
+
+/* **************************************************************** */
+/*								    */
+/* Example 4: rl_callback_* () with rl_timeout_event_hook	    */
+/*								    */
+/* **************************************************************** */
+
+static int
+cb_timeouthandler ()
+{
+  printf ("timeout\n");
+  rl_callback_handler_remove ();
+  running = 0;
+  return READERR;
+}
+
+void
+rltest_timeout_callback2 ()
+{
+  int r;
+
+  rl_timeout (1, 0);
+  rl_timeout_event_hook = cb_timeouthandler;
+  rl_callback_handler_install (prompt, cb_linehandler);
+  running = 1;
+  while (running)
+    rl_callback_read_char ();
+
+  printf ("rltest: Event loop has exited\n");
+}
+
+int
+main (int argc, char **argv)
+{
+  if (argc >= 2)
+    {
+      if (strcmp (argv[1], "readline1") == 0)
+	rltest_timeout_readline1 ();
+      else if (strcmp (argv[1], "readline2") == 0)
+	rltest_timeout_readline2 ();
+      else if (strcmp (argv[1], "callback1") == 0)
+	rltest_timeout_callback1 ();
+      else if (strcmp (argv[1], "callback2") == 0)
+	rltest_timeout_callback2 ();
+      else
+	return 2;
+    }
+  else
+    {
+      fprintf (stderr, "usage: rltest [readline1 | readline2 | callback1 | callback2]\n");
+      return 2;
+    }
+  return 0;
+}
diff --git a/lib/readline/input.c b/lib/readline/input.c
index f514d8c5..e9f360e2 100644
--- a/lib/readline/input.c
+++ b/lib/readline/input.c
@@ -89,6 +89,9 @@ rl_hook_func_t *rl_event_hook = (rl_hook_func_t *)NULL;
 /* A function to call if a read(2) is interrupted by a signal. */
 rl_hook_func_t *rl_signal_event_hook = (rl_hook_func_t *)NULL;
 
+/* A function to call when pselect/select(2) timed out. */
+rl_hook_func_t *rl_timeout_event_hook = (rl_hook_func_t *)NULL;
+
 /* A function to replace _rl_input_available for applications using the
    callback interface. */
 rl_hook_func_t *rl_input_available_hook = (rl_hook_func_t *)NULL;
@@ -463,6 +466,237 @@ rl_clear_pending_input (void)
   return 0;
 }
 
+/* **************************************************************** */
+/*								    */
+/*			    Timeout utility			    */
+/*								    */
+/* **************************************************************** */
+
+static struct timeval timeout_duration, timeout_point;
+
+/* _getch () is used for rl_getc in MinGW 32, but the way to set a
+   timeout for `_getch' is unknow, so we use the fallback by SIGALRM
+   in MinGW 32.. */
+#if (defined (HAVE_PSELECT) || defined (HAVE_SELECT)) && !defined (__MINGW32__)
+#  define RL_TIMEOUT_USE_SELECT
+#else
+#  define RL_TIMEOUT_USE_SIGALRM
+#endif
+
+#if defined (RL_TIMEOUT_USE_SIGALRM)
+#  if defined (HAVE_SETITIMER)
+static int
+set_alarm (unsigned int *secs, unsigned int *usecs)
+{
+  struct itimerval it;
+  it.it_interval.tv_sec = 0;
+  it.it_interval.tv_usec = 0;
+  it.it_value.tv_sec = *secs;
+  it.it_value.tv_usec = *usecs;
+  return setitimer(ITIMER_REAL, &it, NULL);
+}
+static void
+reset_alarm ()
+{
+  struct itimerval it = {0};
+  setitimer(ITIMER_REAL, &it, NULL);
+}
+#  else
+static int
+set_alarm (unsigned int *secs, unsigned int *usecs)
+{
+  if (*secs == 0 || *usecs >= USEC_PER_SEC / 2)
+    (*secs)++;
+  *usecs = 0;
+  return alarm (*secs);
+}
+static void
+reset_alarm ()
+{
+  alarm (0);
+}
+#  endif
+#endif
+
+/* Set a timeout which will be used for the next call of `readline
+   ()'.  When (0, 0) are specified the timeout is cleared.  */
+void
+rl_timeout (unsigned int secs, unsigned int usecs)
+{
+  timeout_duration.tv_sec = secs + usecs / USEC_PER_SEC;
+  timeout_duration.tv_usec = usecs % USEC_PER_SEC;
+}
+
+/* Start measuring the time.  Returns 0 on success.  Returns -1 on
+   error. */
+int
+_rl_timeout_initialize ()
+{
+  unsigned secs, usecs;
+
+  /* Clear the timeout state of the previous edit */
+  RL_UNSETSTATE(RL_STATE_TIMEOUT);
+  timeout_point.tv_sec = 0;
+  timeout_point.tv_usec = 0;
+
+  /* Return -1 when timeout is unset. */
+  if (timeout_duration.tv_sec == 0 && timeout_duration.tv_usec == 0)
+    return 0;
+
+  /* Return -1 on gettimeofday error. */
+  if (gettimeofday(&timeout_point, 0) != 0)
+    {
+      timeout_point.tv_sec = 0;
+      timeout_point.tv_usec = 0;
+      return -1;
+    }
+
+  secs = timeout_duration.tv_sec;
+  usecs = timeout_duration.tv_usec;
+#if defined (RL_TIMEOUT_USE_SIGALRM)
+  /* If select(2)/pselect(2) is unavailable, use SIGALRM. */
+  if (set_alarm (&secs, &usecs) < 0)
+    return -1;
+#endif
+
+  timeout_point.tv_sec += secs;
+  timeout_point.tv_usec += usecs;
+  if (timeout_point.tv_usec >= USEC_PER_SEC)
+    {
+      timeout_point.tv_sec++;
+      timeout_point.tv_usec -= USEC_PER_SEC;
+    }
+  return 0;
+}
+
+/* Get the remaining time until the scheduled timeout.  Returns -1 on
+   error or no timeout set with secs and usecs unchanged.  Returns 1
+   on an expired timeout with secs and usecs unchanged.  Returns 1
+   when the timeout has not yet expired.  The remaining time is stored
+   in secs and usecs.  When NULL is specified to either of the
+   arguments, just the expiration is tested. */
+int
+rl_timeout_remaining (unsigned int *secs, unsigned int *usecs)
+{
+  struct timeval current_time;
+
+  /* Return -1 when timeout is unset. */
+  if (timeout_point.tv_sec == 0 && timeout_point.tv_usec == 0)
+    {
+      errno = 0;
+      return -1;
+    }
+
+  /* Return -1 on error. errno is set by gettimeofday. */
+  if (gettimeofday(&current_time, 0) != 0)
+    return -1;
+
+  /* Return 0 when timeout has already expired. */
+  if (current_time.tv_sec > timeout_point.tv_sec ||
+    (current_time.tv_sec == timeout_point.tv_sec &&
+      current_time.tv_usec >= timeout_point.tv_usec))
+    return 0;
+
+  if (secs && usecs)
+    {
+      *secs = timeout_point.tv_sec - current_time.tv_sec;
+      *usecs = timeout_point.tv_usec - current_time.tv_usec;
+      if (timeout_point.tv_usec < current_time.tv_usec)
+	{
+	  (*secs)--;
+	  *usecs += USEC_PER_SEC;
+	}
+    }
+
+  return 1;
+}
+
+#if defined (RL_TIMEOUT_USE_SELECT)
+static int
+_rl_timeout_wait (int fd, const sigset_t *sigmask)
+{
+  int result;
+  unsigned int secs, usecs;
+#if defined (HAVE_PSELECT)
+  struct timespec *timeout, timeout_buff;
+#else
+  struct timeval *timeout, timeout_buff;
+#endif
+  fd_set readfds;
+  sigset_t origmask;
+
+  timeout = NULL;
+  result = rl_timeout_remaining (&secs, &usecs);
+  if (result == 0)
+    return 0; // timedout
+  if (result == 1)
+    {
+      timeout_buff.tv_sec = secs;
+#if defined (HAVE_PSELECT)
+      timeout_buff.tv_nsec = usecs * 1000;
+#else
+      timeout_buff.tv_usec = usecs;
+#endif
+      timeout = &timeout_buff;
+    }
+
+  FD_ZERO (&readfds);
+  FD_SET (fd, &readfds);
+#if defined (HAVE_PSELECT)
+  result = pselect (fd + 1, &readfds, NULL, NULL, timeout, sigmask);
+#else
+  if (sigmask)
+    sigprocmask (SIG_SETMASK, sigmask, &origmask);
+  result = select (fd + 1, &readfds, NULL, NULL, timeout);
+  if (sigmask)
+    sigprocmask (SIG_SETMASK, &origmask, NULL);
+#endif
+  return result;
+}
+
+static int
+_rl_timeout_handle ()
+{
+  int result;
+  result = READERR;
+  if (rl_timeout_event_hook)
+    result = (*rl_timeout_event_hook) ();
+  //return result;
+
+  RL_SETSTATE(RL_STATE_TIMEOUT);
+  _rl_abort_internal ();
+}
+#endif
+
+int
+_rl_timeout_handle_sigalrm ()
+{
+#if defined (RL_TIMEOUT_USE_SIGALRM)
+  int result;
+
+  if (timeout_point.tv_sec == 0 && timeout_point.tv_usec == 0)
+    return -1;
+
+  /* Reset `timeout_point' to the current time to ensure that later
+     calls of `rl_timeout_pending ()' return 0 (timeout expired). */
+  if (gettimeofday(&timeout_point, 0) != 0)
+    {
+      timeout_point.tv_sec = 0;
+      timeout_point.tv_usec = 0;
+    }
+  reset_alarm ();
+
+  result = READERR;
+  if (rl_timeout_event_hook)
+    result = (*rl_timeout_event_hook) ();
+
+  RL_SETSTATE(RL_STATE_TIMEOUT);
+  _rl_abort_internal ();
+#endif
+  return -1;
+}
+
+
 /* **************************************************************** */
 /*								    */
 /*			     Character Input			    */
@@ -525,10 +759,6 @@ rl_getc (FILE *stream)
 {
   int result;
   unsigned char c;
-#if defined (HAVE_PSELECT)
-  sigset_t empty_set;
-  fd_set readfds;
-#endif
 
   while (1)
     {
@@ -541,16 +771,14 @@ rl_getc (FILE *stream)
 	return (_getch ());	/* "There is no error return." */
 #endif
       result = 0;
-#if defined (HAVE_PSELECT)
-      FD_ZERO (&readfds);
-      FD_SET (fileno (stream), &readfds);
+#if defined (RL_TIMEOUT_USE_SELECT)
 #  if defined (HANDLE_SIGNALS)
-      result = pselect (fileno (stream) + 1, &readfds, NULL, NULL, NULL, &_rl_orig_sigset);
+      result = _rl_timeout_wait (fileno (stream), &_rl_orig_sigset);
 #  else
-      sigemptyset (&empty_set);
-      sigprocmask (SIG_BLOCK, (sigset_t *)NULL, &empty_set);
-      result = pselect (fileno (stream) + 1, &readfds, NULL, NULL, NULL, &empty_set);
+      result = _rl_timeout_wait (fileno (stream), NULL);
 #  endif /* HANDLE_SIGNALS */
+      if (result == 0)
+	return _rl_timeout_handle ();
 #endif
       if (result >= 0)
 	result = read (fileno (stream), &c, sizeof (unsigned char));
diff --git a/lib/readline/readline.c b/lib/readline/readline.c
index de06af1d..6e7dbeb1 100644
--- a/lib/readline/readline.c
+++ b/lib/readline/readline.c
@@ -577,6 +577,13 @@ readline_internal_charloop (void)
 	{
 	  (*rl_redisplay_function) ();
 	  _rl_want_redisplay = 0;
+	  /* Handle `_rl_abort_internal ()' caused by timeout. */
+	  if (RL_ISSTATE (RL_STATE_TIMEOUT))
+	    {
+	      RL_SETSTATE(RL_STATE_DONE);
+	      rl_done = 1;
+	      return 1;
+	    }
 	  /* If we get here, we're not being called from something dispatched
 	     from _rl_callback_read_char(), which sets up its own value of
 	     _rl_top_level (saving and restoring the old, of course), so
@@ -1148,6 +1155,10 @@ _rl_subseq_result (int r, Keymap map, int key, int got_subseq)
 int
 rl_initialize (void)
 {
+  /* set up timeout if a timeout setting is set.  We call it first in
+     this function to precisely obtain the starting time. */
+  _rl_timeout_initialize ();
+
   /* If we have never been called before, initialize the
      terminal and data structures. */
   if (rl_initialized == 0)
diff --git a/lib/readline/readline.h b/lib/readline/readline.h
index 90b53892..8e8c99f8 100644
--- a/lib/readline/readline.h
+++ b/lib/readline/readline.h
@@ -447,6 +447,8 @@ extern int rl_clear_pending_input (void);
 extern int rl_read_key (void);
 extern int rl_getc (FILE *);
 extern int rl_set_keyboard_input_timeout (int);
+extern void rl_timeout (unsigned int, unsigned int);
+extern int rl_timeout_remaining (unsigned int *, unsigned int *);
 
 /* `Public' utility functions . */
 extern void rl_extend_line_buffer (int);
@@ -599,6 +601,9 @@ extern rl_hook_func_t *rl_event_hook;
 /* The address of a function to call if a read is interrupted by a signal. */
 extern rl_hook_func_t *rl_signal_event_hook;
 
+/* The address of a function to call on a timeout. */
+extern rl_hook_func_t *rl_timeout_event_hook;
+
 /* The address of a function to call if Readline needs to know whether or not
    there is data available from the current input source. */
 extern rl_hook_func_t *rl_input_available_hook;
@@ -906,6 +911,7 @@ extern int rl_persistent_signal_handlers;
 #define RL_STATE_REDISPLAYING	0x1000000	/* updating terminal display */
 
 #define RL_STATE_DONE		0x2000000	/* done; accepted line */
+#define RL_STATE_TIMEOUT	0x4000000	/* done; timeout expired */
 
 #define RL_SETSTATE(x)		(rl_readline_state |= (x))
 #define RL_UNSETSTATE(x)	(rl_readline_state &= ~(x))
diff --git a/lib/readline/rlprivate.h b/lib/readline/rlprivate.h
index 7d7c3819..86ddaa77 100644
--- a/lib/readline/rlprivate.h
+++ b/lib/readline/rlprivate.h
@@ -4,7 +4,7 @@
 /* Copyright (C) 1999-2021 Free Software Foundation, Inc.
 
    This file is part of the GNU Readline Library (Readline), a library
-   for reading lines of text with interactive input and history editing.      
+   for reading lines of text with interactive input and history editing.
 
    Readline is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
@@ -78,7 +78,7 @@ typedef struct  __rl_search_context
   int search_string_size;
 
   char **lines;
-  char *allocated_line;    
+  char *allocated_line;
   int hlen;
   int hindex;
 
@@ -169,7 +169,7 @@ typedef struct __rl_vimotion_context
 
 /* fill in more as needed */
 /* `Generic' callback data and functions */
-typedef struct __rl_callback_generic_arg 
+typedef struct __rl_callback_generic_arg
 {
   int count;
   int i1, i2;
@@ -259,7 +259,7 @@ extern void _rl_keyseq_cxt_dispose (_rl_keyseq_cxt *);
 extern void _rl_keyseq_chain_dispose (void);
 
 extern int _rl_dispatch_callback (_rl_keyseq_cxt *);
-     
+
 /* callback.c */
 extern _rl_callback_generic_arg *_rl_callback_data_alloc (int);
 extern void _rl_callback_data_dispose (_rl_callback_generic_arg *);
@@ -300,6 +300,8 @@ extern int _rl_input_queued (int);
 extern void _rl_insert_typein (int);
 extern int _rl_unget_char (int);
 extern int _rl_pushed_input_available (void);
+extern int _rl_timeout_initialize (void);
+extern int _rl_timeout_handle_sigalrm (void);
 
 /* isearch.c */
 extern _rl_search_cxt *_rl_scxt_alloc (int, int);
@@ -371,7 +373,7 @@ extern void _rl_internal_char_cleanup (void);
 extern void _rl_init_executing_keyseq (void);
 extern void _rl_term_executing_keyseq (void);
 extern void _rl_end_executing_keyseq (void);
-extern void _rl_add_executing_keyseq (int); 
+extern void _rl_add_executing_keyseq (int);
 
 /* rltty.c */
 extern int _rl_disable_tty_signals (void);
@@ -469,7 +471,7 @@ extern int _rl_vi_domove_motion_cleanup (int, _rl_vimotion_cxt *);
 /* Use HS_HISTORY_VERSION as the sentinel to see if we've included history.h
    and so can use HIST_ENTRY */
 #if defined (HS_HISTORY_VERSION)
-extern void _rl_free_history_entry (HIST_ENTRY *); 
+extern void _rl_free_history_entry (HIST_ENTRY *);
 #endif
 
 /*************************************************************************
diff --git a/lib/readline/signals.c b/lib/readline/signals.c
index ecaf699e..cd1a579b 100644
--- a/lib/readline/signals.c
+++ b/lib/readline/signals.c
@@ -266,6 +266,9 @@ _rl_handle_signal (int sig)
     case SIGQUIT:
 #endif
 
+      if (sig == SIGALRM)
+	_rl_timeout_handle_sigalrm ();
+
 #if defined (HAVE_POSIX_SIGNALS)
       if (block_sig)
 	sigprocmask (SIG_BLOCK, &set, &oset);
-- 
2.21.3

