

------------------------------------------------------------------------------
  Memo
------------------------------------------------------------------------------

2020-01-20

* newlib-cygwin コンパイルの時の注意

  1. setup.exe で cocom, xmlto, gendef, zlib-devel を入れる。

    コンパイルの途中で shilka が要求される。shilka は cocom に含まれている。
    他に xmlto が要求される。
    gendef は newlib-cygwin に含まれている気がするが念の為入れておく。
    zlib.h がないというエラーが出るので zlib-devel を入れてみたが効果はなかった。

  2. make distclean で綺麗にする。

    make clean をしてしまうと make distclean ができなくなるので注意する。
    もし make clean をした場合は手動で以下を実行する。
    $ rm -f $(find . -name config.cache) winsup/cygwin/cygwin.sc

  3. ./configure --prefix=$HOME/opt/cygwin/devel && make する。

  4. make -C x86_64-pc-cygwin/newlib/doc makedoc.exe; make する。

    途中で makedoc を作るルールがありません、と表示されるので、
    makedoc.exe と拡張子まで指定して生成させて make をやりなおす。

  * "ld: Unsupported PEI architecture: pei-i386"
    x86_64-pc-cygwin/winsup/cygwin でこのエラーが発生した時は
    古い cygwin.sc が残っている。特に x86 から x86_64 に切り替えた時。

  * "x86_64-pc-cygwin/winsup/cygwin/cygdll.a': そのようなファイルはありません"
    このエラーメッセージは上のエラーメッセージが出た後に
    改めて make すると出る。空の cygwin1.dll ができているので、
    次のステップに進もうとして、しかし implib である cygdll.a がないのでエラーになる。

2019-07-23

* Cygwin 3.1.0 以降では Takashi Yano によって 2019-04-01 に
  押し込まれた変更により、cygwin console の機能は使えなくなり、
  基本的に Windows のコマンドプロンプトによってエスケープシーケンスが処理される。
  古い Windows で動かした時にのみ fallback として cygwin console が起動する。

* Cygwin のやり取りを見ていたら Corinna Vinschen は
  git send-email を推奨している。調べてみる。ちゃんと Gmail の設定もできる様だ。
  http://masahir0y.blogspot.com/2013/06/git-send-email.html
  https://qiita.com/troter/items/3b4cd6972c338b95835d
  受け取り方が何だかよく分からないが。.mbox 形式?


------------------------------------------------------------------------------
  ToDo
------------------------------------------------------------------------------

2020-04-13

* [保留] report6

  report6 を準備仕掛けて諦めたが一応ファイルは残しておく。
  expect で問題が起こるのではないかと思ったが、
  expect に使い慣れていないのでよく分からない。
  というより実は問題が起こるのは非常に限定された状況の様にも思われる。
  という事なのでこれは保留にする。

2020-01-23

* ble.sh の補完の反応が悪い。
  途中で停止する為に使っている read -t 0 が動いていない?
  うーん。これは動いているような動いていない様な。
  関係在るかもしれないしないかもしれない。分からない。

2019-07-24

* 一つの方法は "DECSCUSR を復活させる" と称して
  24bit モードでもシーケンスの解釈をさせる様に変更するという事である。
  然し、そもそも既存の DECSCUSR だって、何だか振る舞いが他の端末と違ったし、
  本当に無理やり対応させる価値があるのかというと微妙である。

  まあ cygwin console は死んだと思って良いのである。
  或いは明示的に cygwin console を使う方法があっても良いのだとは思うが。。

  * 追記: 2020-01-18 Cygwin を更新して 3.1.2 にしたら色々トラブルが出ている。
    序でに調べてみた所、どうやら DECSCUSR には新しく対応し直した様だ。
    1..6 が他の端末と同じ振る舞いで 7 が下太下線。
    7以上でカーソルの大きさの%指定という機能は継承されなかった様だ。

  * 追記: 2020-01-20 今日 cygwin-patches を見たら、
    丁度古い cygwin console を使う為の CYGWIN 環境変数の設定が追加されていた。
    CYGWIN に disable_pcon を指定すれば良い。未だ merge はされていないが。

  * 追記: 2020-01-23 実は bash.exe のショートカットを作って、
    プロパティの[オプション]タブの[レガシコンソールモード]にチェックを入れれば
    普通に cygwin console を利用することができるようだ。
    disable_pcon はなくても良かったのだ。

2019-07-23

* 気になるのは今まで cygwin console で対応していた全ての機能が
  Windows のコマンドプロンプトによって提供されているのか、という事である。
  或いは最早 cygwin コンソールではないので気にしなくても良いという事なのだろうか。
  まあその様な考え方もあるにはあると思われる。

  - 実際に試してみた所 DECSCUSR が使えなくなっている。

  - set scrolling region は OK

  - REP は cygwin も cmd も両方共変な実装になっている。
    元からそういう物だったのか? xterm がそうなのかもしれない。
    と思って xterm で試してみたがそんな事はなかった。
    xterm はちゃんと最後に入力された文字を繰り返している。

2019-07-22

* console: 観察していて気づいたのだが 24bit color 対応の箇所における
  con.nargs の使い方がまるで誤っている気がする。
  これだと単体の色設定の SGR しか使えない…。

* console: 新しい cygwin の console は fhandler_console とは独立に思われる。
  一方で fhandler_console は今も未だ変更の対象である。
  fhandler_console の振る舞いを今はテストできていないが、
  以下の問題が解決したとは思われない。

  - Cygwin は ED(2) "ESC [ 2 J" が駄目
  - Cygwin は RI の振る舞いがおかしい
  - Cygwin は最終行での DL "ESC [ M" が駄目
  - Cygwin は CUF() の行き先が行末 $ の時に何処にも移動しない。


------------------------------------------------------------------------------
  Done
------------------------------------------------------------------------------

2020-02-08

* non cygwin process を起動すると起動の瞬間に端末の内容が書き換えられる。

  | どうも Windows Pseudo Console が内部的に持っている状態(?)を
  | そのまま画面に dump している様に見える。問題なのは、
  | Windows Pseudo Console が対応していない機能で
  | 表示していた内容が全て消えてしまうという事。
  |
  | screen の中で screen に対して ESC k ... ST を使って
  | window title を設定していると、pcon はこれを内部的に正しく認識していないので、
  | それが書き戻されてプロンプトが滅茶苦茶になる。
  | そうでなくても太字が全て高輝度に置き換えられてしまうし、
  | 様々な SGR 修飾が消滅してしまう。
  |
  | non cygwin process は何でも良い。例えば以下で作れる。
  | $ x86_64-w64-mingw32-gcc -xc - -s -o nocyg <<< 'main(){}'
  |
  | 新しい snapshot にして見たら最初の一回だけ書き換えられる様になった。
  | それ以降には問題は起こらない。然し、これで解決したと思って良いのだろうか。
  | 或いはこれ以上厳密に対応するのは難しいのだろうか。
  |
  | 然し、最近はそんなに pty の変更はされていない。
  | どの commit によって初回だけ影響を受ける様になったのだろうか。
  | 幾つかコンパイルしてそれで確かめる事にするのが良い気がする。
  |
  | 2020-01-24 cygwin1-20200124.dll
  | 2020-01-28 cygwin1-20200128-13d75fc.dll
  | 2020-01-28 cygwin1-20200128-5ba41ad.dll
  | 2020-01-28 cygwin1-20200128-e38f2dc9b.dll
  | 2020-01-31 cygwin1-20200131.dll
  | 2020-02-04 cygwin1-20200204-ac1ccc2.dll
  | 2020-02-06 cygwin1-20200206-3a71c4638.dll
  |
  | 症状について確認する。
  |
  | 3.3.0m2-fa63a73    1回発生(screen,mintty) 動かない(contra)
  | 20200124           発生(screen,mintty) 発生(contra)
  | 7d68ffa            発生(screen,mintty) 発生しない(contra)
  | 3.1.3m-823ac8d     発生(screen,mintty) 発生しない(contra)
  | 20200128-5ba41ad   発生(screen,mintty) 発生しない(contra)
  | 20200128-e38f2dc9b 1回発生(screen) 発生しない(contra)
  | 20200128-13d75fc   1回発生(screen) 発生しない(contra)
  | 20200131           1回発生(screen) 発生しない(contra)
  | 20200206-3a71c4638 1回発生(screen,mintty,xterm) 発生しない(contra)
  |
  | 少なくとも1回発生と常に発生の境目は発見した。以下である。
  | e38f2dc9b - (12 days ago) Cygwin: pty: Revise code waiting for forwarding again. - Takashi Yano
  |
  | うーん。pcon はトラブルが沢山あるし、
  | よく考えたら端末アプリケーションを利用する上で pcon を用いた方が良い理由はあるのだろうか。
  | また速度を計測してみると disable_pcon の方が格段に処理速度が速い。

  大した事ではないと思いつつやはり報告はしておくべきなのかもしれない。
  ssh, scp, git push/pull with ssh connections
  →これは報告した: report4.txt

2020-01-24

* 2020-01-17 ble.sh: cygwin コンソールで実行するとすぐに閉じてしまう [D0009]
  idle の処理を実行している途中に入力があると落ちてしまう様だ。

  cygwin version は 3.1.2 である。前に使っていたのが何かは分からない。
  ble-detach すると落ちないで使う事ができている。
  調べたら 3.1 から例の新しい xterm-256color が利用可能になる様だ。

  | どの瞬間に落ちているのか、というのは大量にファイルに書き出してみる
  | 等すれば分かるだろう。というよりトラブルがある度に色々埋め込んだりするのは
  | 大変だ。なのでスイッチひとつで verbose に実行結果を出力する事ができる様に
  | する事は可能だろうか? というかその為に set -x があるのではないか?
  |
  | と思ったが。うーん。
  |
  | 取り敢えず中で更に bash を立ち上げてみると、
  | 落ちるのは bash であって console の方ではない様だという事が分かった。
  |
  | 全然変更が反映されないので変だと思っていたら
  | 物凄く馬鹿な事をしていた。hp2019 の ble.sh を書き換えて、
  | ローカルの方を書き換えていなかった。
  |
  | 試している内に分かった事。
  | 先ず USER 変数が設定されていない。
  | HOME は設定されている様だ。
  | 然し手で USER を export して設定しても問題は解消しない。
  | これはまた別の問題の様である。
  |
  | * set -x は結局試してみたが余り役に立たない感じだった。
  |   ble.sh の側でも /dev/null だとか或いは別の目的で
  |   リダイレクトをしているので set -x の出力が必ずしも
  |   画面に出力されるとは限らないのである。
  |
  |   それに大量の出力が出すぎて良く分からない。
  |
  | * 少しずつ絞っていく。
  |   どうも ble-decode/.hook の中で起こっている訳ではない様だ。
  |   idle の中で起こっているのかと思ったがそうでもない。不思議だ。
  |   どうも Bash の内部で問題が起こっているらしい。
  |   しかも gdb で調べようと思っても別にクラッシュしている訳ではなく
  |   普通に Bash が終了している? 不思議だ。
  |
  | * bleopt_internal_suppress_bash_output= を設定して起動すると
  |   勝手に終了する確率は格段に小さくなるがそれでも未だ
  |   勝手に終了してしまうのである。
  |
  |   ble-0.1, 0.2, 0.3 も全部同様の症状である。
  |   何故だろうか。何が悪いのだろうか。
  |   或いは何らかの trap? SIGWINCH?
  |   →shopt -u checkwinsize しても再現する。
  |
  |   shopt -u failglob しても再現する。
  |
  |   そもそも bash --norc から source しても再現するのである。
  |   不思議な事である。

  * cygwin 3.1.1 のコンソールで発生する。xterm 等では発生しない。
    中で起動した screen の中でも発生しない。
  * Bash が勝手に終了する。Bash のバージョンは 4.4.12。
    クラッシュではなく通常終了。EXIT trap は呼ばれない。
  * bind -x の中ではなく別の場所で発生する。
  * ble-0.1..0.4 の全てで再現する
  * shopt -u checkwinsize でも再現する
  * shopt -u failglob でも再現する
  * bash --norc から始めても再現する
  * bleopt_internal_suppress_bash_output= すると確率は減るが再現する

  | うーん。例えば console に対する ungetc が壊れている?
  | read -t 0 をしない様にすれば解決するだろうか?
  | → function ble/util/is-stdin-ready { false; } で潰しても駄目だった。
  | 他の場所ではこの様な危ない事はしていない。うーん。何がいけないのだろうか。
  |
  | bash-5.0.11 でも駄目だった。何が行けないのだろうか。
  | bind -x '"\C-t":sleep 1' して C-t を連打したら再現するだろうか?
  | 然し再現しなかった。難しい。
  |
  | bind '"\C-t":self-insert' としていても止まってしまう。
  | (builtin bind '"\C-t":self-insert')
  | つまり bash_execute_unix_command の次が別の物であっても発生する。
  |
  | bash_execute_unix_command の次に
  | 再度 bash_execute_unix_command が呼び出されるとしても
  | 必ずしも失敗する訳ではない。
  | これが意味する所は前回の bash_execute_unix_command の間に特定の操作をすると、
  | その次の受信で問題が起こるのだという事である。
  |
  | 怪しいのはやはり exec なのである。
  | exec を呼び出している箇所を確認する。
  |
  | ble-edit/bind/stdout.on
  | ble-edit/bind/stdout.off
  | ble-edit/bind/stdout.off (bash-3.0)
  | ble/util/openat
  |
  | うーん。ble/util/openat を他で使っているのは msleep だけである。
  |
  | suppress_output と以下を組み合わせて問題が起こらない様にしようとしたが再現する。
  | それでも死んでしまう。うーん。更に ble/util/is-stdin-ready も潰したが再現する。
  |
  | | ble/util/msleep() {
  | |   local v=$1; ((v<0)) && return
  | |   local frac=$((1000+v)); frac=${frac:${#frac}-3}
  | |   local mant=$((v/1000))
  | |   sleep "$mant.$frac"
  | | }
  | | type ble/util/msleep
  | | ble/util/is-stdin-ready() { false; }
  |
  | しかし何れにしても suppress_output が大いに関係していそうなのは確かなのである。
  | うーん。全然駄目なんだ。もし本当に終了しているのだとすればその経路を調べたい。
  | bash のソースを弄らないと分からないという事なんだ。
  |
  | * 結局ソースコードを見る事にした
  |   bash_execute_unix_command に b をしかけてスタックトレースを見る。
  |
  |   #0  bash_execute_unix_command (count=1, key=101) at bashline.c:4183
  |   #1  0x000000010047ed81 in _rl_dispatch_subseq (key=101, map=0x1004ac3e0 <vi_insertion_keymap>, got_subseq=0) at readline.c:852
  |   #2  0x000000010047f2e9 in _rl_dispatch (map=<optimized out>, key=<optimized out>) at readline.c:798
  |   #3  readline_internal_char () at readline.c:632
  |   #4  0x000000010047fa65 in readline_internal_charloop () at readline.c:659
  |   #5  readline_internal () at readline.c:671
  |   #6  readline (prompt=<optimized out>) at readline.c:377
  |
  |   readline, readline_internal, readline_internal_charloop, readline_internal_char が怪しい。
  |   動いている内は readline_internal_charloop の中にいる様だ。読み取りに失敗するとこれを抜ける。
  |   readline_internal_char の中の終了判定に入っている。
  |
  |   先ず if (c == EOF && rl_end) に入る。
  |   RL_SIG_RECEIVED() は false
  |   RL_ISSTATE (RL_STATE_TERMPREPPED) は true
  |   c=-1,_rl_eof_char=-1,lastc=-1,EOF=-1
  |
  |   正常に動いている時にはそもそも c == EOF にならない。
  |   この値は c = rl_read_key (); から来ている。
  |   うーん。input.c: rl_read_key の中で
  |   rl_get_char に失敗して rl_getc_function を呼び出している。
  |   それが -1 を返しているのである。rl_getc_function の中身は rl_getc だった。
  |   rl_getc の中を見る。遡っていくと
  |   result = read (fileno (stream), &c, sizeof (unsigned char));
  |   が 0 になっている。つまり read に失敗しているのである。
  |   うーん。fileno(stream) は 0 だった。
  |
  |   #define DEBUG_RETURN(Tag, value) do { \
  |     FILE*f=fopen("/dev/tty","w"); \
  |     fprintf(f,"%s",Tag);fflush(f); \
  |     fclose(f); \
  |     return value; \
  |   }while(0)
  |
  |   read -t 0 との関連性についても調べたい。
  |   確かにこれを封じるとクラッシュしなくなったのだ。
  |   代わりにコマンド候補の自動列挙で物凄く時間がかかっている。
  |
  |   うーん。入力がある時に read -t 0 すると動かなくなるというバグなのか?
  |   再現しない。更に標準出力の繋ぎ変えも関係している筈。
  |   (問題は 0 ではなくて 1 や 2 しか変更していないのに影響があるという事)

  * read() が EOF を返すというのが問題の様だ。
    つまり Bash の埒外である。更に上の枠組みがおかしくなっている。
  * 取り敢えず Cygwin 3.0.7 では再現しない事を確認した。
    という事はこれはやはり Cygwin 3.1.2 の一連の PTY バグの内の一つである。
  * read -t の使用や exec による fd の繋ぎ変えが
    終了の頻度に寄与している事は確かだが、何れも確率的な物で、
    もしこれらを使用しないとしてもやはり問題が何れ発生する。

  | Cygwin に報告しようと思ったが報告しようにもどうしたら良いか分からない。
  | そもそも再現性がないと全然駄目だ。やはりもう少し調べなければならない。
  |
  | strace を試してみる。strace -tt -p PID -o LOGFILE として実行してみる。
  | strace は子プロセスまで調べる様だ。今回の場合にはそれで良いのかもしれない。
  | しかし実際にやってみると 17000 行も出力されてどうしようもない。
  | 取り敢えず EOF を受け取る瞬間までで良いから見てみたい所である。
  |
  | 何処が EOF を受け取った瞬間だろうか。
  | うーん。read で調べてみる。read が 0 を返した時が EOF の時。
  | というかそもそも起こる瞬間の strace だけ取って来て再現できるという保証もない。
  | それよりも前に呼び出された設定によって既に種が仕掛けられている可能性もあるのだ。
  |
  | この大量のログを見た所で何の情報が手に入るというのだろうか。
  | 結局何も得られない気がする。それよりは ble.sh を弄って
  | minimal な再現プログラムを作る方が妥当である。
  |
  | 何と別の現象を発見した。
  |
  | * blerc に return と書いておくと何もしなくても起動してすぐに終了する。
  |   blerc を空にしても同じ現象である。これは rcfile として直接 ble.sh を指定しても、
  |   或いは .bashrc 経由で ble.sh を読み込んでも同じである。
  | * ble-attch を呼び出すよりも後で終了する。
  |   更に確認した所 ble-attach を抜けた後に終了している。
  |   idle 等の操作は ble-attach の中で実行している。
  |   実はもう抜けた時には既に EOF を受け取っているのかもしれない。
  |   →調べてみると ble-attach を抜けた後に EOF を受け取っている。
  | * ble/util/is-stdin-ready() { false; } は余り影響はない様だ。
  | * 更に blerc return と bleopt_internal_suppress_bash_output= を両方設定すると
  |   exit と表示して更に早く終了する。何が起こっているのだろうか。
  |
  | 取り敢えず bash 5.0.11 を弄って EOF を受け取った瞬間に其処で終了する様にした。
  | strace は 1110 行にまで短くなった。出力を見ると以下の場所で EOF を受け取っている。
  |
  | 158 7071584 [main] bash 18715 read: read(0, 0xFFFFB797, 1) blocking
  |  68 7071652 [main] bash 18715 fhandler_console::read: read(0xFFFFB797,1)
  |  40 7071692 [main] bash 18715 read: 0 = read(0, 0xFFFFB797, 0)
  |
  | 結局分からない。これは後で処理する事にする。

  この即座に終了する振る舞いを用いて最小再現コードを作成する事にした。

  ここから bug-report/cygwin で作業する。
  他の cygwin のバグは修正したが
  ble.sh が cygwin console で即終了する問題はまだ解決していない。

  [再現コード最小化]

  | 取り敢えず問題を最小化する為に自動的に再現する範囲でコードを最小化する。
  | 現在自動的に最小化する為に suppress= を使う事ができる。
  | これでロード時に即終了するのを維持したまま何処まで小さくできるか。
  | 小さくした後で strace にかけて動作を真似するプログラムを作れるか検討する。
  |
  | 調べると suppress は関係なくすぐ終了する。
  | というか別の終了の仕方をする。
  | →--noinputrc を指定したら終了しなくなった。
  |   うーん。実は起動してすぐに終了してしまう問題は pty と関係ない?
  |   と思ったがそれは変だ。何故なら普通の端末では再現しない。
  |
  | 結局以下を実行するかしないかで運命が別れている様子だ。
  | ble/builtin/bind/.process -- '"\e[3~": delete-char'
  | ble/builtin/bind/.process -- '"\e[1~": beginning-of-line'
  | ble/builtin/bind/.process -- '"\e[4~": end-of-line'
  | ble/builtin/bind/.process -- '"\e[H": beginning-of-line'
  | ble/builtin/bind/.process -- '"\e[F": end-of-line'
  | ble/builtin/bind/.process -- '"\e[7~": beginning-of-line'
  | ble/builtin/bind/.process -- '"\e[8~": end-of-line'
  | ble/builtin/bind/.process -- '"\eOH": beginning-of-line'
  | ble/builtin/bind/.process -- '"\eOF": end-of-line'
  |
  | 一つでも実行すると後で終了する。
  | 遂に ble.sh なしで再現した。

  # bashrc
  stty -icanon
  printf '\e[6n'
  read -t 0
  mapfile arr < /dev/null

  | 更にこれをコマンドラインに入力しても再現する事を確かめた。
  | stty -icanon; printf '\e[6n'; read -t 0; mapfile arr < /dev/null; stty icanon
  | という事は恐らく初期化した後に入力すると終了してしまうのも似たような理由?
  |
  | 更に read < /dev/null でも再現する。
  | うーん。これなら strace で確認しても良いのではないか?
  |
  | $ stty -icanon; printf '\e[6n'; read -t 0; read < /dev/null
  | strace で上記コマンドを実行した時の様子を確認してみたが、
  | 1785行出力した。全然役に立たない気がする。
  | stty を先に実行するとどうなるだろうか。
  | と思ったがそうすると操作が困難になる。うーん。
  | 或いは、bash のソースコードを見て再現を試みる? そちらの方が楽そうだ。
  |
  | 新情報:
  |
  |   stty -icanon
  |   (printf '\e[6n')
  |   read -t 0
  |   read < /dev/null
  |   read || echo fail # ←これが即失敗する
  |
  | 更に read < /dev/null は : < /dev/null でも良かった。
  | 更に更に。別に stty と printf は bash の中でなくても良かった。
  | $ stty -icanon; printf '\e[6n'; bash --rcfile <(echo 'read -t 0; : < /dev/null')
  | これでも再現する。
  | $ stty -icanon; printf '\e[6n'; read -t 0; bash --rcfile <(echo ': < /dev/null')
  | こうすると呼び出した bash も終了するし、現在のシェルも終了する。
  | $ stty -icanon; printf '\e[6n'; read -t 0; : < /dev/null; bash

  * 以下のコマンドで問題を確認できる。
    stty -icanon; printf '\e[6n'; read -t 0; : < /dev/null; read || echo fail
  * stty と printf は別のプロセスで良い。
    親プロセスでも子プロセスでも自分でも良い。
  * read -t 0 は子プロセスでは駄目。
  * redirect を実行したプロセスとその子プロセスの
    それぞれの最初の read が影響を受ける。

  | うーん。自分で実装しても再現しない。
  | 処理は stty;print_dsr6;input_avail;redirect;read であり、
  | stty;print_dsr6 と redirect;read は自分の C++ プログラムに置き換えても再現した。
  | 残っているのは read -t 0 なのであるが…。
  | $ ./min-stty-dsr6;read -t 0;./min-redir-read
  |
  | read -t 0 + ./min-redir-read を自分で書いたプログラムで置き換えると再現しない。
  | read -t 0 の syscall を観察する?
  | うーん。やはり大量に出力されているのでどれが重要なのか分からない。
  |
  | 或いは bash のソースコードを短くしていく必要がある?
  |
  | その前に別の不思議な現象として。
  | 自分で実装した時に DSR(6) response が戻ってこない? 何故?
  | sleep を入れてみる事にするのである→sleep を入れたが変化はない。
  |
  | →これは分かった。渡す fd を間違えていた。
  |   STDIN_FILENO を渡す所を STDOUT_FILENO を渡していた。
  |
  | 自分で書いたプログラムで再現した。OK

2020-01-23

* shared_info::initialize: size of shared memory region changed from [D0008]

  | 二分法で探索してみると別の pty に対する修正によって動かなくなっている。
  | 6cc299f0e - (2 days ago) Cygwin: pty: Revise code waiting for forwarding by master_fwd_thread. - Takashi Yano
  |
  |   shared_info::initialize: size of shared memory region changed from
  |
  | というエラーメッセージが出て bash も起動しないし dash も起動しないし、
  | cat も ls も起動しない。これは cygwin1.dll の互換性の問題だろう。
  | 例えば tty.h で端末の構造体の大きさを変更してしまったので
  | 共有メモリの配置が変化したなど? 何れにしても tty.h を弄ったら、
  | 他の多くのプログラムが再コンパイルになるというのは想像に難くない。
  | (本当だろうか? 直接触るのではなくて HANDLE で処理している限りは
  | 特に問題ないのではないだろうか?)
  |
  | これについては気づく人がいれば気づくだろう。

  そもそも cygwin1.dll のテストの方法が悪いのだろうか。
  うーん。これについてもメールを書かなければならない。
  →取り敢えず質問を出したのでこれで満足

  返事が来た。cygwin1.dll を使っているプロセスが残っているのではないか、と。
  それは確認したことである。と思ったがよく考えたら ps に残っている変な項目があったのを思い出した。

  $ ps uaxf
      PID    PPID    PGID     WINPID   TTY         UID    STIME COMMAND
    36874   36873   36874      19104  ?         197610 21:36:29 /home/murase/opt/screen/4.7.0m/bin/screen-4.7.0
    36873   36770   36873      15180  pty4      197610 21:36:29 /home/murase/opt/screen/4.7.0m/bin/screen-4.7.0
    36887   36874   36887       1048  pty6      197610 21:36:30 /usr/bin/bash
    36770   36769   36770       5660  pty4      197610 21:35:20 /usr/bin/bash
    38347   36887   38347       2844  pty6      197610 22:11:14 /usr/bin/ps
    36769       1   36769       7456  ?         197610 21:35:20 /home/murase/bin/contra
     1416       1    1416      11160  ?         197610   Jan 20 /home/murase/opt/screen/4.7.0m/bin/screen-4.7.0

  いつまでも残っているのでどうしようもない。Windows を再起動する事にした。
  →再起動したら直った。

  さて、これで ble.sh/bash で read(2) が EOF を返す問題も直っていたら
  嬉しかったが果たして直っていなかった。legacy console mode で起動しても
  やはり直っていない様子だ。

* 実は legacy console mode はショートカットのプロパティのオプションの [D0007]
  "レガシーコンソールモード" というのにチェックを入れれば良い様だ…。
  つまりデバグする為ならばわざわざ disable_pcon を使わなくても良かった?

* contra を起動しても bash の反応がない。プロンプトを出した所で止まる [D0006]
  どうも bash との通信がうまく行っていない気がする。うーん。

  他の物が影響しているかもしれないので問題修正の commit だけ取り込んで試してみる。
  やはり再現する。bash との通信がうまく行っていない。
  x 1 直接 contra win を開くとプロンプトが表示された所で止まっている。
  o 2 mintty の中から contra win を開くと普通に使える。
  x 3 mintty の中から contra tty を開くと vi モードのモード表示が出た所で止まる。

  そもそも上の 1, 3 が同じ問題なのか別の問題なのかも分からないが、
  少なくとも、この commit を拾うと両方とも再現する様になるのである。

  →取り敢えず先に 3 について調べる事にする。これが駄目だという事は
    O_NONBLOCK が駄目という事だろうか。と思って minimal_openpt.cpp をコンパイルしてみる。
    実際にやってみるとちゃんと動いている。うーん。
    minimal_openpt.cpp が動くのに contra tty が動かないというのは不思議な事である。
    あー。やっぱり -mwindows が悪いんだろうか。。再度試してみる必要がある。

  * ble.sh なしでのチェック
    後もう一つ確認して置かなければならないのは。
    これは ble.sh が絡んでいるのかそうでないのかという事。
    ble.sh がある時にだけ再現するというのだとまた複雑である。

    →大丈夫。ble.sh がなくても再現する。.bashrc の先頭で return して確かめた。

  * そう言えば入力が全く処理されていないという事は。
    そもそもこちらからの入力を読み取れていないという事だろうか。
    だとすると、もっとプログラムを単純化する事ができるのではないか。

    然し、それとは別に contra win は問題を抱えている。うーん。

    何れにしても単純化を試してみる事にする。
    単純化させて思ったのは…。終了させる方法がないという事。
    termios.c_cc[VINTR] = 003; /* C-c */

  →どうも。そもそも nonblock を指定しなくても様子が変だ。
    うーん。これで取り敢えず報告を書く事にする。

  報告したら修正が入った。取り敢えずこれは動くようになった。
  一緒に起こっていた他の問題もちゃんと直った。

  というかミスが多すぎである。
  状況を調べる為だけに何時間も消えた。

* 2020-01-18 cygwin を update したら Cygwin 3.1.2 になっている [D0005]

  contra を動かすと何か変だ。物凄くぴかぴかして黒いウィンドウがちらつく。
  始め contra の問題かと思ってデバグをしていたがよく分からない。
  再現プログラムを作ろうとしたらどんどん小さくなっていく。
  結局 gcc -mwindows でコンパイルしたプログラムで端末に出力をすると、
  以降そのセッションでは spawn する度にコンソールが表示されるという事の様だ。

  例えば mintty --version すると以降そのセッションではぴかぴかして
  見づらいし、遅いし、CPU は食うし大変な事になる。

  というか報告する前に最新の Cygwin を確認しておく。
  と思って fetch したら Cygwin 3.1.2 が出てから
  Takashi Yano 氏が沢山修正している。
  色々問題が出てきて焦っているところだろうか。
  この一連の修正で直ったという事もあるかもしれない。様子見する。

  取り敢えず report を送った。
  と思ったら再現しない、という報告が帰ってきた。うーん。
  何か再現の条件があるのだろうか。
  というかもしかして Windows を再起動したら直ったりして。。
  →再起動してみたが未だ再現する。何がいけないのだろうか。
    もっと詳しく見てみなければならないだろうか。
    或いは locale の問題などの可能性はあるだろうか。
    うーん。何れにしてもこれは暫く様子見する。

  再現しないのは変だ。これに寄与しそうな事として他に何がある?
  もう一つの note pc で試しても再現した。
  locale が関係している? と思って試したら英語にしたら再現しなくなった。
  →再度 report を送った。

  原因を特定したという返事が来て修正が来た。
  新しい cygwin に push されるのを待ってコンパイルして試してみた。

  x と思ったらそもそも端末がどれも動かなくなっている。
    これについては新しい項目を立てて考える事にする。

  x さて、上の問題を起こしている commit は drop してコンパイルして当座は凌ごうと思ったら
    今度は contra を起動しても制御が渡ってこない。色々おかしい。

  これらはそれぞれの項目で対処する事にする。

2020-01-18

* Cygwin のビルドを試みる [D0004]
  1. setup.exe で cocom, xmlto, gendef, zlib-dev を入れる。
  2. make distclean ; rm -f $(find . -name config.cache) で綺麗にする。
  3. ./configure --prefix=$HOME/opt/cygwin/devel && make する。
  4. make -C x86_64-pc-cygwin/newlib/doc makedoc.exe; make する。

  Note: shilka は cocom に入っている。
    他に xmlto や gendef 等がビルド中に使われる様だ。
  Note: make distclean の前に make clean をすると Makefile が消えてしまう。
    これによって "find . -name config.cache -exec rm -f {} \; \;" を
    手動で実行しなければならなくなる。また cygwin.sc というファイルも消す。
    $ rm -f $(find . -name config.cache) winsup/cygwin/cygwin.sc

  x86_64-pc-cygwin/winsup/cygwin/cygdll.a': そのようなファイルはありません
  というエラーが出てコンパイルできない。winsup/cygwin/Makefile の中を見ると、
  どうも cygdll.a は cygwin0.dll を生成した時に一緒に出力される予定の気がする。
  そして cygwin0.dll を消してやり直してみると以下のエラーが表示されている。
  /usr/lib/gcc/x86_64-pc-cygwin/7.4.0/../../../../x86_64-pc-cygwin/bin/ld: Unsupported PEI architecture: pei-i386

  やりなおしても駄目。失敗するコマンドは以下の通り。怪しい物もない気がする。

  | g++ -L/home/murase/prog/ext/newlib-cygwin/x86_64-pc-cygwin/winsup/cygwin
  |   -isystem /home/murase/prog/ext/newlib-cygwin/winsup/cygwin/include
  |   -B/home/murase/prog/ext/newlib-cygwin/x86_64-pc-cygwin/newlib/
  |   -isystem /home/murase/prog/ext/newlib-cygwin/x86_64-pc-cygwin/newlib/targ-include
  |   -isystem /home/murase/prog/ext/newlib-cygwin/newlib/libc/include
  |   -O2 -g -mno-use-libstdc-wrappers -L/usr/lib/w32api
  |   -Wl,--gc-sections -nostdlib -Wl,-T../../.././winsup/cygwin/cygwin.sc -static
  |   -Wl,--heap=0 -Wl,--out-implib,cygdll.a -shared -o cygwin0.dll
  |   -e dll_entry cygwin.def
  |   advapi32.o aio.o arc4random_stir.o assert.o autoload.o base64.o
  |   bsdlib.o clock.o ctype.o cxx.o cygheap.o cygthread.o cygtls.o
  |   cygwait.o cygxdr.o dcrt0.o debug.o devices.o dir.o dlfcn.o
  |   dll_init.o dtable.o environ.o errno.o exceptions.o exec.o external.o
  |   fcntl.o fenv.o fhandler.o fhandler_clipboard.o fhandler_console.o
  |   fhandler_cygdrive.o fhandler_dev.o fhandler_disk_file.o
  |   fhandler_dsp.o fhandler_fifo.o fhandler_floppy.o fhandler_netdrive.o
  |   fhandler_nodevice.o fhandler_pipe.o fhandler_proc.o
  |   fhandler_process.o fhandler_process_fd.o fhandler_procnet.o
  |   fhandler_procsys.o fhandler_procsysvipc.o fhandler_random.o
  |   fhandler_raw.o fhandler_registry.o fhandler_serial.o
  |   fhandler_signalfd.o fhandler_socket.o fhandler_socket_inet.o
  |   fhandler_socket_local.o fhandler_socket_unix.o fhandler_tape.o
  |   fhandler_termios.o fhandler_timerfd.o fhandler_tty.o
  |   fhandler_virtual.o fhandler_windows.o fhandler_zero.o flock.o
  |   fnmatch.o fork.o forkable.o fts.o ftw.o getentropy.o getopt.o glob.o
  |   glob_pattern_p.o globals.o grp.o heap.o hookapi.o inet_addr.o
  |   inet_network.o init.o ioctl.o ipc.o kernel32.o ldap.o
  |   libstdcxx_wrapper.o loadavg.o localtime.o lsearch.o malloc_wrapper.o
  |   minires-os-if.o minires.o miscfuncs.o mktemp.o mmap.o mmap_alloc.o
  |   msg.o msgcat.o mount.o net.o netdb.o nfs.o nftw.o nlsfuncs.o ntea.o
  |   passwd.o path.o pinfo.o poll.o posix_ipc.o posix_timer.o
  |   pseudo-reloc.o pthread.o quotactl.o random.o regcomp.o regerror.o
  |   regexec.o regfree.o registry.o resource.o rexec.o rcmd.o scandir.o
  |   sched.o sec_acl.o sec_auth.o sec_helper.o sec_posixacl.o security.o
  |   select.o sem.o setlsapwd.o shared.o shm.o sigfe.o signal.o sigproc.o
  |   smallprint.o spawn.o strace.o strfmon.o strfuncs.o strptime.o
  |   strsep.o strsig.o sync.o syscalls.o sysconf.o syslog.o termios.o
  |   thread.o timerfd.o times.o tls_pbuf.o tty.o uinfo.o uname.o wait.o
  |   wincap.o window.o winf.o xsique.o malloc.o acoshl.o acosl.o asinhl.o
  |   asinl.o atan2l.o atanhl.o atanl.o cabsl.o cacosl.o cargl.o casinl.o
  |   catanl.o cbrtl.o ccosl.o ceill.o cephes_emath.o cexpl.o cimagl.o
  |   clog10l.o clogl.o conjl.o copysignl.o coshl.o cosl.o cosl_internal.o
  |   cossin.o cpowl.o cprojl.o creall.o csinl.o csqrtl.o ctanl.o erfl.o
  |   exp10l.o exp2l.o expl.o expm1l.o fabsl.o fdiml.o finite.o floorl.o
  |   fmal.o fmaxl.o fminl.o fmodl.o frexpl.o ilogbl.o internal_logl.o
  |   isinf.o isnan.o ldexpl.o lgammal.o llrint.o llrintf.o llrintl.o
  |   llroundl.o log10l.o log1pl.o log2l.o logbl.o logl.o lrint.o lrintf.o
  |   lrintl.o lroundl.o modfl.o nearbyint.o nearbyintf.o nearbyintl.o
  |   nextafterl.o nexttoward.o nexttowardf.o pow10l.o powil.o powl.o
  |   remainder.o remainderf.o remainderl.o remquol.o rint.o rintf.o
  |   rintl.o roundl.o scalbl.o scalbnl.o sinhl.o sinl.o sinl_internal.o
  |   sqrtl.o tanhl.o tanl.o tgammal.o truncl.o version.o winver.o
  |   /home/murase/prog/ext/newlib-cygwin/x86_64-pc-cygwin/winsup/cygserver/libcygserver.a
  |   /home/murase/prog/ext/newlib-cygwin/x86_64-pc-cygwin/newlib/libm/libm.a
  |   /home/murase/prog/ext/newlib-cygwin/x86_64-pc-cygwin/newlib/libc/libc.a
  |   -lgcc
  |   /usr/lib/gcc/x86_64-pc-cygwin/7.4.0/../../../../lib/w32api/libkernel32.a
  |   /usr/lib/gcc/x86_64-pc-cygwin/7.4.0/../../../../lib/w32api/libntdll.a -Wl,-Map,cygwin.map

  /usr/lib/gcc/x86_64-pc-cygwin/7.4.0/../../../../x86_64-pc-cygwin/bin/ld: Unsupported PEI architecture: pei-i386

  一つずつ消していったら -Wl,-T../../.././winsup/cygwin/cygwin.sc というオプションを
  消したらエラーが出なくなった。
  cygwin.sc を開いて中を覗くと確かに pei-i386 と書かれている。
  Makefile を覗くと cygwin.sc を生成するルールが在るので、
  一旦 cygwin.sc を待避して改めて cygwin.sc を生成してみる。

  make したらそのままコンパイルの続きが始まった。
  zlib がないというエラーが出る。/usr/include/zlib.h にちゃんとある。
  よく分からないが new-cygwin1.dll は既に生成されているので気にしない事にする。

  opt/cygwin/devel に環境を作ろうとしたが mintty が動かない。
  contra も試しに動かそうとしてみたがやはり動かない。

  仕方がないので /bin/cygwin1.dll を直接置き換える事にした。
  3.1 であれば特に問題もないだろうと期待する。
  →動かしてみた。動いている。

  結局最新の cygwin でも再現したのだった。


2019-07-23

* Cygwin console を起動させる方法? [D0003]

  * うーん分からない。少なくとも Takashi Yano は fhandler_console
    で動く端末でテストできていた筈なのである。
    それが何故今できないのだろうか…。

  | 元々の cygwin1.dll を使うとちゃんと
  | fhandler_console 由来の端末で起動している。
  |
  | a 今度は自分でコンパイルしたバイナリを使ってみる事にした。
  |   然し、それでも矢張り謎のターミナルで起動する。
  |   取り敢えず terminfo や cyggcc に対する依存性はなくす事ができた。
  |
  | b どういう事だろう。或いは最近の更新で変更されたのだろうか。
  |   3.0.7 をビルドしてみる事にする。
  |   →何と自前で3.0.7をビルドした場合にはちゃんと cygwin console になった。
  |
  | c 或いは ./configure で適切なフラグを設定する必要があるのだろうか。
  |   ./configure --help で中を見てみたがそれっぽい物は見つからない。
  |   winsup の中の ./configure や winsup/cygwin の中の ./configure も確認してみたが、
  |   やはり関係のありそうな物は見つからない。
  |
  | d それとも cygwin の中でビルドすると色々と変な物を引っ掛けるという事なのだろうか。
  |   一応 cygwin1.dll について cygcheck で調べてみるとちゃんと kernel32 にだけに依存している。

  結局 b でちゃんと cygwin console になる事が確認できた。
  つまりビルドの仕方の問題というよりかは実際に変更が行われたのである。

  | うーん。二分法で何処から xterm-256color 的な変なターミナルになるのか調べる…。
  | checkout してビルドするだけかと期待したが駄目だった。
  | ./configure からやり直さなければならなかった。つまり、物凄く時間がかかる。
  | $ m clean; m; m -C i686-pc-cygwin/newlib/doc makedoc.exe; m
  | うーん。実は cygwin dll だけをコンパイルするという様にはできないだろうか。
  |
  |   6b7723a83 xterm-256color
  |   40b947e7d xterm-256color
  |   f527171a9 コンパイル失敗
  |     滅茶苦茶沢山のエラーが出ているので何か include が抜けているという事の気がする
  |   513f050cb xterm-256color
  |   6a06c6bc8 xterm-256color
  |     % コンパイル失敗 @ new-cygwin
  |     % うーん。また失敗した…。もしかするとこのリポジトリのファイル自体が壊れている?
  |     % 何と、空の winsup/cygwin/globals.h ファイルができていて、
  |     % これを削除してみたらちゃんと動き始めた。
  |     結局 Yano 氏の段階ではmasterは既にcygwin consoleではなくなっていたという事なのか。
  |   d1be0a59d cygwin
  |     うーん。もしかして bump が原因なのか?
  |     Bump するだけでバージョンの整合・不整合などの理由によって変化する?
  |
  |   あー。どうも分かった気がする。
  |   bd627864a で導入されたのは 24bit color ではない。
  |   ENABLE_VIRTUAL_TERMINAL_PROCESSING で検索してみると
  |   https://qiita.com/zetamatta/items/0c6130bd631491b97844 という記事が見つかった。
  |   結局既存の cygwin console のコードは使わなくなって、
  |   代わりにコマンドプロンプトのコードを使う事になったという事なのだろう…。
  |   つまり "24bit color に対応する" とか嘯いて実際は "cygwin console を捨てさせた" のである。
  |   これは分かりにくい。というかこれで良いのだろうか…。
  |
  |   更に言うと 256 色 / 24bit 色に対応している様に見えた部分は、fallback コードである。

  問題は結局 Takashi Yano によって導入された 24bit 対応だった。
  結局 "24bit 対応" と称してコマンドプロンプトに全部のシーケンスを横流ししているだけなのだ。
  問題の箇所は fhandler_console::write_normal の中にある while ループである。
  何れにしてもこれで cygwin console の端末としての機能はほぼ死んだという事。
  今後使われる事もないし今後メンテナンスされる事もない。

  | * [保留] Linux 上でクロスコンパイルできないか?
  |   うーん。linux 上でクロスコンパイルできないかと思って
  |   sudo dnf search cygwin 等としてみたが当たらない。
  |   というかそもそも cygwin をコンパイルするのに target が cygwin で良いのかも不明である。
  |   a 以下に macOS で i686-pc-cygwin-gcc を生成する方法が書かれている。
  |     http://fd0.hatenablog.jp/entry/20090204/p1
  |   b sudo dnf search で cross-compile で検索すると MinGW が色々出てくる。
  |     mingw32-gcc を入れてコンパイルしたらできたりするんだろうか。
  |     取り敢えず入れてみる。
  |     $ sudo dnf search install mingw32-{gcc,gcc-c++,binutils,headers,crt}
  |     然し、cygwin をクローンして ./configure して make すると何も起きない。
  |     ./configure の段階ではクロスコンパイラを認識している気がする。
  |     ./configure の出力を見ると何故か "checking whether we are cross compiling... no" になっている。
  |     どうも分かった。--target ではなくて --host を指定しなければならないのだ。
  |     うーん。気になるので追加で cross-compile 関係を入れる。
  |     $ sudo dnf install mingw32-{xz,gmp,gcc-gfortran,gcc-objc}
  |     $ sudo dnf install flex expect isl isl-devel
  |     駄目だ…結局何もコンパイルされない。
  |
  |     普通に linux 上で使う為にコンパイルでもしてみるかと思ったがそれも駄目だった。
  |     もうよく分からないので諦める事にした。削除した。

  Linux 上でのクロスコンパイルは難しそうである。

  * winsup/cygwin/how-to-debug-cygwin.txt というファイルを見つけた。
    中を覗いてみたがビルドの仕方については載っていない。単にデバッガを使う方法とか諸々。

2019-07-21

* 最新版における cygwin console の振る舞いのテスト [D0002]

  | 取り敢えず printf で制御シーケンスを出力して変な振る舞いがないか見る。
  | と思ったら色々と直ってしまっている気がする。
  | これは本当に cygwin コンソールなのだろうか。
  | DA2 応答を見ようとしたら返事がない。変だ。
  |
  | 分からないので現状の cygwin1.dll をコピーしてみて同じ様に振る舞うのかを調べる。
  | 成る程…現行の cygwin1.dll だとやはり問題は再現する。DA2 応答もちゃんと帰ってくる。
  | 然し、自前でビルドした cygwin1.dll だと問題は発生していない。代わりにDA2が来ない。
  | 大幅に修正されたという事なのだろう…。
  | 或いはもしかすると完全に別の実装に切り替わってしまった?
  |
  | 何れにしても前にあった問題が全て解決したかどうかを確認したい。
  | 再び自前でビルドした cygwin1.dll に変えて試してみる。
  | - 念の為また DA2 応答を調べてみる。やはり全く何も返信していない様だ。
  | - RI は普通に戻っていた。CUF の問題も解決していた。
  | - \e[100H として物凄くスクロールする問題も解決していた。
  | - ED(2) が何も動かないという問題は解決している?
  |   然し、ED(2) で (0,0) に移動してしまうという振る舞いは変である。
  | - DL(n) が最終行まで削除する時に全然削除されないという問題も解決している。
  |
  | うーん。git blame してみても 2014 年ごろに幾らか振る舞いが変更されている以外は
  | 全然変更されていない。ED のコードもちゃんとカーソル位置を復元している様に見える。
  | うーん。これを思うと実は現在コンソールを表示しているコードは別にある?
  |
  | DA2 に対する応答は全然ないが DA1 に対する応答は存在している。
  | 確認してみると CSI ? 1 ; 0 c を返している。
  | これは cygwin console の CSI ? 6 c とは異なっている。
  | - 検索してみても怪しい所は見つからない。
  |   うーん。完全に異なるコードベースの上で動いているのだろうか。
  |   或いは ConPty を使う様になったという事なのかもしれない。
  | - conpty で検索しても何も見つからない。
  | - xterm-256color で検索してみると見つかった。
  |   cygwin/environ.cc にある win32env_to_cygenv (PWCHAR rawenv, bool posify) という関数。
  |   wincap.has_con_24bit_colors () という関数を呼び出して判定している。
  |   関数呼び出しだがこれは wincap.h で実装されていて実際には
  |   中に持っている構造体の同名のビットフィールドを返す様になっている。
  |   何れにしてもこれも判定は Windows のバージョンに従って行われている様子である。
  |   wincap.cc に各 Windows に対するフラグがそのまま記録されている。
  |
  | 実は Cygwin 3.0 branch は物凄く古いコードの上で動いているんだろうか。
  | と思ったがそんな事もなかった。現在見ている最新版と大差ないコードである。
  | というよりも DA2 応答を見る限りは今見ているコードはやはり cygwin の方である。
  | 最新版で動いているのはやはり謎ターミナルのきがする。
  | というか DA1 応答も今見ているコードは \e[?6c である。
  | そして他に terminal の様なコードは見当たらない。

  結論としては最新版でビルドされる cygwin1.dll を使って
  bash を直接起動すると cygwin console ではない謎の console で起動される。
  TERM=xterm-256color であり DA1 応答は \e[?1;0c である。DA2応答はない。
  実は他の端末が起動しているとしたらどの端末だろうか。
  - mintty は DA1R として \e[64;1;2;4;6;9;15;21;22;28;29c を返すので違う。
    そもそも mintty は ED(2) でちゃんとその場に留まる。
  - ConPTY の可能性…。検索したら以下に ConPTY のサンプルコードがある。
    https://devblogs.microsoft.com/commandline/windows-command-line-introducing-the-windows-pseudo-console-conpty/
    CreatePseudoConsole という API が存在する様だ。
    然しこの関数は cygwin の中では呼び出されていない。謎だ。

* 自前でビルドした Cygwin の上で bash を動かしてみるテスト [D0001]
  というか bash は単体で起動するんだろうか。

  $ cygcheck /usr/bin/bash
  C:\cygwin\bin\bash.exe
    C:\cygwin\bin\cygwin1.dll
      C:\WINDOWS\system32\KERNEL32.dll
        C:\WINDOWS\system32\ntdll.dll
        C:\WINDOWS\system32\KERNELBASE.dll
    C:\cygwin\bin\cygiconv-2.dll
    C:\cygwin\bin\cygintl-8.dll
    C:\cygwin\bin\cygreadline7.dll
      C:\cygwin\bin\cygncursesw-10.dll
    C:\cygwin\bin\cyggcc_s-1.dll

  駄目だ色々な物に依存している。
  これらをごっそりとコピーして試してみる…。
  $ mkdir test
  $ cd test
  $ mkdir bin
  $ cp /bin/cygなんとか.dll bin/

  と思ったが駄目だった。
  一応 bash は立ち上がる物のコマンド類が全く使えないのでまともに動かない。
  うーん。どうした物か。というか先ず terminfo が見つからない…。

  無理やり terminfo をコピーする。
  $ cd test
  $ mkdir -p usr/share
  $ cp -r /usr/share/terminfo usr/share/terminfo

  一応これで bash の行編集はまともに動く様になった。
  然し、echo $TERM を実行してみると xterm-256color を名乗っている…。
  さて、今から試したい事は先ず初めにこれが cygwin console である事の確認。
  うーん。分からない。

* Cygwin のビルド

  取り敢えず最新の cygwin をビルドする所から始める。

  * サブディレクトリに入ってから Cygwin のコンパイルを試すが通らない。
    gendef: command not found となる。
    検索すると MinGW 関連のバイナリの様である。
    Cygwin の setup.exe で探してみるが mingw-w64-tools 的な物はない。
    分からないと思って setup.exe の窓に gendef と入れてみたら
    gendef 単体で見つかった。入れる事にした。

    然し入れてから実行してみるとエラーになって動かない。
    gendef がファイルを開くのに失敗しましたと言っている。
    というか gendef に渡されている様々のオプション引数が
    全てファイル名として解釈されている様だ。gendef のバージョン等が違うのだろうか。

  全然分からない。以前 cygwin をデバグした時の記録を探してみる事にする。
  どうやら前回は色々と追加で入れる必要があった物のちゃんとコンパイルできていた様である。

  * うーん。改めて全体で configure した物を確認してみる。
    No rule to make target 'makedoc', needed by 'all-am'
    というエラーメッセージが発生している。うーん。これを無視する様に編集しようか。
    Makefile を覗いてみたらどうも makedoc.c なるファイルが存在する事になっている。
    と思って makedoc.c をコピーしてみても状況は変化しない。
    結局 make makedoc.exe を実行したら動いた。拡張子を指定しなければならなかったのである。
    もっと詳しく見ると all-am は $(DATA) を要求し $(DATA) は $(noinst_DATA) に展開される。
    一方でルールは $(MKDOC) に対してしか定義されていない。
    以下の部分が問題になっている様だ。"automake will add $(EXEEXT)" という部分が気になる。

      # We can't use noinst_PROGRAMS, because automake will add $(EXEEXT).
      noinst_DATA = makedoc
      MKDOC = makedoc$(EXEEXT_FOR_BUILD)

    うーん。元の Makefile.am を見てみても同様に書かれている。
    git blame Makefile.am として見たが 2000年からこの部分は全く変化していない様だ。
    また前にビルドした時(2017年3月)以降には変更はない様でもある。うーん。
    環境によって .exe をつけたりつけなかったりが色々なのだろうか。

  取り敢えず先に進む事にする。ビルドに結構時間がかかっている様だ。
  というより Build the listings... というメッセージの所でずっと固まっている。
  psforest がまたエラーになっていたのでそれを直したら new-cygwin1.dll が完成していた。
